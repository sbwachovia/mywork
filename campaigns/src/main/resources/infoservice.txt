angular.module('Sri.userInfo.module', []);angular.module('Sri.userInfo.module').controller('SriErrorCtrl', SriErrorCtrl);SriErrorCtrl.$inject = ['$uibModalInstance', 'alertParams'];function SriErrorCtrl($uibModalInstance, alertParams) {    this.alertText = alertParams.alertText;    this.okButtonText = alertParams.okButtonText;    this.cancelButtonText = alertParams.cancelButtonText;    this.alertParams = alertParams;    if(alertParams.okButtonText === undefined) {        this.okButtonText = 'OK';    }    if(alertParams.cancelButtonText === undefined) {        this.cancelButtonText = 'Cancel';    }    this.okButtonAction = function () {        if(alertParams.okButtonAction !== undefined) {            alertParams.okButtonAction();        }        $uibModalInstance.close('SUCCESS');    };    this.cancelButtonAction = function () {        if(alertParams.cancelButtonAction !== undefined) {            alertParams.cancelButtonAction();        }        $uibModalInstance.dismiss('CANCEL');    };}sriDeleteAccess.$inject = ["userInfoService"];angular.module('sri.userInfo.module').directive('sriDeleteAccess', sriDeleteAccess);function sriDeleteAccess(userInfoService) {    console.log(userInfoService);    return {        restrict: 'A',        replace: true,        priority: 100,        //TODO : UserInfoService not getting injected if pulled into a different function        link: function (scope, element, attributes) {            var hasDeleteAccess = userInfoService.hasDeleteAccess(attributes.sriDeleteAccess);            var isButtonElem = element[0] instanceof HTMLButtonElement;            if (isButtonElem && !hasDeleteAccess) {                element.remove();            }        }    };}/** * Created by  */angular.module('sri.userInfo.module').directive('sriEntityButtons', sriEntityButtons);function sriEntityButtons() {    return {        restrict: 'E',        replace: true,        scope: {            controller: '=',            operation: "=",            resource: "@",            form: "=",            enableSubmit: "=",            includeSave: "@",            entity: "="        },        templateUrl: sriEntityButtonsTemplateUrl,        link: sriEntityButtonsLink,    };}function sriEntityButtonsTemplateUrl(elem, attrs) {    return 'app/templates/sri-entity-buttons.html';}function sriEntityButtonsLink(scope, element, attributes) {    scope.onEdit = function() {        scope.operation = 'edit';        scope.controller.edit();    };    scope.onBack = function() {        scope.controller.back();    };    scope.onNext = function() {        scope.controller.next();    };}sriEntityStatus.$inject = ["userInfoService"];angular.module('sri.userInfo.module').directive('sriEntityStatus', sriEntityStatus);function sriEntityStatus(userInfoService) {    return {        restrict: 'E',        replace: true,        scope: {            entity: '=',            operation: '=',            title: '@',            resource: '@'        },        templateUrl: sriEntityStatusTemplateUrl,        link: function sriEntityStatusLink(scope, element, attributes) {            scope.hasWriteAccess = userInfoService.hasWriteAccess(scope.resource);            scope.readOnly = "/sri-web-domain/scripts/node_modules/sri-ui/node_modules/sri-ui-userinfo-service/images/readonly.png";            scope.editing = "/sri-web-domain/scripts/node_modules/sri-ui/node_modules/sri-ui-userinfo-service/images/editing.png";            scope.editable = "/sri-web-domain/scripts/node_modules/sri-ui/node_modules/sri-ui-userinfo-service/images/editable.png";            scope.changePending = "/sri-web-domain/scripts/node_modules/sri-ui/node_modules/sri-ui-userinfo-service/images/changePending.png";            scope.future = "/sri-web-domain/scripts/node_modules/sri-ui/node_modules/sri-ui-userinfo-service/images/future.png";            scope.needsApproval =  "/sri-web-domain/scripts/node_modules/sri-ui/node_modules/sri-ui-userinfo-service/images/needsApproval.png";            scope.needsRepair =  "/sri-web-domain/scripts/node_modules/sri-ui/node_modules/sri-ui-userinfo-service/images/needsRepair.png";        },    };}function sriEntityStatusTemplateUrl(elem, attrs) {    return 'app/templates/sri-entity-status.html';}sriPdfReport.$inject = ["$http"];angular.module('sri.userInfo.module').directive('sriPdfReport', sriPdfReport);function sriPdfReport($http) {    return {        restrict: 'E',        replace: true,        scope: {            url: "@",            operation: "=",            uuid: "=",            pdfclass: "@",        },        templateUrl: 'app/templates/sri-pdf-report.html',        link: function GetPdfReportLink(scope, element, attributes) {            console.log('pdfclass=',scope.pdfclass);            scope.onPdf = function() {                //console.log('*************'+$http);                var param =(scope.operation==='edit') ?'MOD':'PROD';                var urls = scope.url+'/'+param+'/'+scope.uuid;                var req = {                    method: 'GET',                    url: urls,                    headers: {                        'REQUEST_ID': 'requestId',                        'Access-Control-Allow-Origin': '*',                        'Access-Control-Allow-Headers': 'origin, content-type, accept, authorization'                    },                    responseType: 'arraybuffer',                };                $http(req).then(function (result) {                    var ieEDGE = navigator.userAgent.match(/Edge/g);                    var ie = navigator.userAgent.match(/.NET/g); // IE 11+                    var oldIE = navigator.userAgent.match(/MSIE/g);                    var name = "changes";                    var blob = new window.Blob([result.data], {type: 'application/pdf'});                    if (ie || oldIE || ieEDGE) {                        var fileName = name + '.pdf';                        window.navigator.msSaveBlob(blob, fileName).open(fileName);                    }                    else {                        var file = new Blob([result.data], {                            type: 'application/pdf'                        });                        var fileURL = URL.createObjectURL(file);                        var a = document.createElement('a');                        a.href = fileURL;                        a.target = '_blank';                        a.download = name + '.pdf';                        document.body.appendChild(a);                        a.click();                    }                });            };        },    };}/**========================================================= * =========================================================*/sriSpinner.$inject = ["httpRequestTrackerService"];angular.module('sri.userInfo.module').directive('sriSpinner', sriSpinner);function sriSpinner(httpRequestTrackerService) {    console.log(httpRequestTrackerService);            return {        restrict: 'EA',        replace: true,        transclude: true,        scope: {                       imgSrc: '@?',                   },        template: [            '<div  class="activityModal" id="ajaxloader" ng-show="httpTrack.pageDataLoading">',            ' <img class="activitySpinner"  ng-src="/sri-web-domain/scripts/node_modules/sri-ui/node_modules/sri-ui-userinfo-service/images/spinner.gif"  alt="Loading...">',            '  <ng-transclude></ng-transclude>',            '</div>',        ].join(''),        controller: ['$scope', 'httpRequestTrackerService', function ($scope, httpRequestTrackerService) {           // console.log('spiiner dire',httpRequestTrackerService.pageDataLoading);            $scope.httpTrack=httpRequestTrackerService;        }],    };}/**========================================================= * =========================================================*/sriWriteAccess.$inject = ["userInfoService"];angular.module('sri.userInfo.module').directive('sriWriteAccess', sriWriteAccess);function sriWriteAccess(userInfoService) {    console.log(userInfoService);    return {        restrict: 'A',        replace: true,        priority: 100,        //TODO : UserInfoService not getting injected if pulled into a different function        link: function (scope, element, attributes) {            var hasWriteAccess = userInfoService.hasWriteAccess(attributes.sriWriteAccess);            var isButtonElem = element[0] instanceof HTMLButtonElement;            if (isButtonElem && !hasWriteAccess) {                element.remove();            }            var fieldsetElement = element[0] instanceof HTMLFieldSetElement;            if (fieldsetElement && !hasWriteAccess) {                element.attr("disabled", true);            }        }    };}/** *  */sriApiService.$inject = ["$q", "$resource", "userInfoService", "sriErrorService", "httpRequestTrackerService"];angular.module('sri.userInfo.module').service('sriApiService', sriApiService);//sriApiService.$inject = ['$q', '$resource', 'userInfoService', 'sriErrorService'];function sriApiService($q, $resource, userInfoService, sriErrorService,httpRequestTrackerService) {    var self = this;    this.invoke = function (options) {        //console.log("PARAMS " + JSON.stringify(options.params));      //  console.log('API invoking **************************');        //console.log('before **************************',httpRequestTrackerService.pageDataLoading);        if(options.url.indexOf('/sri-web/userAlerts') === -1) {            httpRequestTrackerService.pageDataLoading = true;        }else {            httpRequestTrackerService.pageDataLoading = false;        }        //console.log('after **************************',httpRequestTrackerService.pageDataLoading);        return result(options, self.uniqueId(options.method));    };    var result = function (options, uniqueId) {        //options.url =  options.url;        var url=  options.url.replace('sri-web', 'sri-web-domain');        var api = $resource(url, options.params, {            invoke: {                params: angular.merge({}, options.params),                method: options.method ? options.method : 'GET',                headers: {                    'REQUEST_ID': uniqueId,                    'cache-control': 'no-cache, no-store, must-revalidate',                    'Pragma' : 'no-cache',                    'Expires' : '0'                }            }        });        return api.invoke(options.payload).$promise.then(function (result) {            return $q.resolve(result.data);        }).catch(function (err) {            httpRequestTrackerService.pageDataLoading=false;            if (err.data) {                switch (err.data.code) {                    case 401:                    case 412:                    case 422:                        return $q.reject(err.data);                }            }            var errorMsg='';            console.log("Unexpected Error " + JSON.stringify(err));            if(err!==null&&  err.data!==null && err.data.message.indexOf('integrity constraint') !== -1){                errorMsg="This operation has failed due to "+err.data.message;            }else{                errorMsg = 'An unexpected exception has occurred.\nPlease contact support team(ReqId:'+uniqueId+').';            }            return sriErrorService.getAlert({                    alertText: errorMsg,                    cancelButtonText: 'OK',                    cancelButtonAction: function () {                        return $q.reject();                    }                }            );        })          .finally(function () {             // console.log('API finally **************************');              httpRequestTrackerService.pageDataLoading=false;            });    };    this.uniqueId = function (method) {        var d = new Date();        var newUniqueId = d.getTime();        if (newUniqueId == this.prevTimeId)            this.prevUniqueId = this.prevUniqueId + 1;        else {            this.prevTimeId = newUniqueId;            this.prevUniqueId = 0;        }        newUniqueId = newUniqueId + '' + this.prevUniqueId;        method = method ? method : 'GET';        return method + ' - ' + newUniqueId;    };    var prevUniqueId = null;    var prevTimeId = null;}/**========================================================= *  =========================================================*/angular.module('sri.userInfo.module').factory("httpRequestTrackerService", HttpRequestTrackerService);function HttpRequestTrackerService() {    this.httpTrack = {pageDataLoading : false, group:false};    return this.httpTrack;    }/** *  */sriErrorService.$inject = ["$q", "$uibModal"];angular.module('sri.userInfo.module').service('sriErrorService', sriErrorService);function sriErrorService($q, $uibModal) {    this.getAlert = function(alertParams) {        this.deferred = $q.defer();        this.modalOpen('lg', alertParams);        return this.deferred.promise;    };    this.modalOpen = function (size, alertParams) {        var that = this;        var modalInstance = $uibModal.open({            animation: true,            backdrop: false,            keyboard: false,            templateUrl: 'app/templates/sri-error.html',            controller: 'sriErrorCtrl as sriErrorCtrl',            size: size,            resolve: {                alertParams: function() {                    if(alertParams === undefined) {                        return {};                    }                    return alertParams;                }            }        }).result.then(function (status) {                if (status === 'SUCCESS') {                    that.deferred.resolve();                } else {                    that.deferred.reject();                }            });    };}/**========================================================= * =========================================================*/angular.module('sri.userInfo.module').service("userInfoService", userInfoService);function userInfoService() {    var user = {        userName: '',        role: '',        userId:'',    };    var userResources = {};    //var userAlerts = {};    /*jshint validthis:true */    this.loadUserResources = function () {        return userResources;    };    /*jshint validthis:true */    this.setUserInfo = function (userInfo) {        user.userName = userInfo.firstName + ' ' + userInfo.lastName;        user.role = userInfo.entitlementRoleName;        user.userId = userInfo.userId;        userResources = userInfo.resources;    };    this.reSetUserInfo = function () {        user.userName ='';        user.role = '';        user.userId ='';        userResources ={};    };    /*jshint validthis:true */    this.getUser=function(){        return user;    };    /*jshint validthis:true */    this.getUserResources = function () {        return userResources;    };    /*jshint validthis:true */    this.hasResourceAccess = function (resourceKey) {        if (userResources.hasOwnProperty(resourceKey)) {            return true;        }        return false;    };    /*jshint validthis:true */    this.getEntitlementActions = function (resourceKey) {       return userResources[resourceKey];    };    this.hasWriteAccess = function (resourceKey) {        var accessRights = this.getEntitlementActions(resourceKey);        return accessRights !== undefined && accessRights.indexOf("write") >= 0;    };    this.hasDeleteAccess = function (resourceKey) {        var accessRights = this.getEntitlementActions(resourceKey);        return accessRights !== undefined && accessRights.indexOf("delete") >= 0;    };    }angular.module("sri.userInfo.module").run(["$templateCache", function($templateCache) {$templateCache.put("app/templates/sri-entity-buttons.html","<div><button type=submit class=\"btn btn-primary\" ng-click=onBack() ng-show=\"(operation == \'read\' || operation == \'add\') && controller.back !== undefined\">Back</button> <button type=submit class=\"btn btn-primary\" ng-click=onNext() ng-show=\"(operation == \'read\' || operation == \'add\') && controller.next !== undefined\" ng-disabled=\"operation == \'add\' && form.$invalid\">Next</button> <button type=submit class=\"btn btn-primary\" ng-click=onEdit() ng-if=\"operation == \'read\' && entity.changePending === false && controller.edit !== undefined\" sri-write-access={{resource}}>Edit</button> <button type=submit class=\"btn btn-primary\" ng-if=\"operation == \'read\' && entity.changePending === false && controller.delete !== undefined\" ng-click=controller.delete() sri-delete-access={{resource}}>Delete</button> <button type=submit class=\"btn btn-primary\" ng-disabled=\"enableSubmit === false || form.$invalid\" ng-if=\"(operation == \'edit\' || operation == \'add\') && controller.submit !== undefined\" ng-click=controller.submit()>Submit</button> <button type=submit class=\"btn btn-primary\" ng-disabled=\"enableSubmit === false || form.$invalid\" ng-if=\"(operation == \'edit\' || operation == \'add\') && includeSave != undefined && controller.save !== undefined\" ng-click=controller.save()>Save</button> <button type=submit class=\"btn btn-primary\" ng-click=controller.close() ng-if=\"operation == \'read\' && controller.close !== undefined\">Close</button> <button type=submit class=\"btn btn-primary\" ng-click=controller.revert() ng-if=\"(operation == \'edit\' || operation == \'add\') && controller.revert !== undefined\">Revert</button></div>");$templateCache.put("app/templates/sri-entity-status.html","<div>entity.changePending = {{entity.changePending}},operation{{operation}} ,hasWriteAccess{{hasWriteAccess}}<div ng-if=\"operation === \'read\'\"><div ng-if=\"entity.changePending === false && !hasWriteAccess\"><img ng-src={{readOnly}}><span class=\"h4 text-center\">{{title}}</span></div><div ng-if=\"entity.changePending === false && hasWriteAccess\"><img ng-src={{editable}}><span class=\"h4 text-center\">{{title}}</span></div></div><div ng-if=\"operation == \'edit\' || operation == \'add\'\"><img ng-src={{editing}}><span class=\"h4 text-center\">{{title}}</span></div><div ng-if=\"entity.changePending && operation !== \'edit\' && operation !== \'add\'\"><img ng-src={{changePending}}><span class=\"h4 text-center\">{{title}}</span></div><div ng-if=\"entity.state === \'REPAIR\'\"><img ng-src={{needsRepair}}><span class=\"h4 text-center\">{{title}}</span></div><div ng-if=\"entity.state === \'FUTURE\'\"><img ng-src={{future}}><span class=\"h4 text-center\">{{title}}</span></div><div ng-if=\"entity.state === \'SUBMIT\'\"><img ng-src={{needsApproval}}><span class=\"h4 text-center\">{{title}}</span></div></div>");$templateCache.put("app/templates/sri-error.html","<div><div class=modal-body><div class=form-horizontal style=\"min-width: 500px\">{{sriErrorCtrl.alertText}}</div></div><div class=modal-footer><button type=submit class=\"btn btn-primary\" ng-click=sriErrorCtrl.okButtonAction() ng-if=\"sriErrorCtrl.alertParams.okButtonAction !== undefined\">OK</button> <button type=submit class=\"btn btn-primary\" ng-click=sriErrorCtrl.cancelButtonAction() ng-if=\"sriErrorCtrl.alertParams.cancelButtonAction !== undefined\">{{sriErrorCtrl.cancelButtonText}}</button></div></div>");<div>    <button type="submit" class="btn btn-primary" ng-click="onBack()" ng-show="(operation == 'read' || operation == 'add') && controller.back !== undefined" >Back</button>    <button type="submit" class="btn btn-primary" ng-click="onNext()" ng-show="(operation == 'read' || operation == 'add') && controller.next !== undefined"  ng-disabled="operation == 'add' && form.$invalid">Next</button>    <button type="submit" class="btn btn-primary" ng-click="onEdit()" ng-if="operation == 'read' && entity.changePending === false && controller.edit !== undefined" sri-write-access="{{resource}}">Edit</button>    <button type="submit" class="btn btn-primary" ng-if="operation == 'read' && entity.changePending === false && controller.delete !== undefined" ng-click="controller.delete()" sri-delete-access="{{resource}}">Delete</button>    <button type="submit" class="btn btn-primary" ng-disabled="enableSubmit === false || form.$invalid" ng-if="(operation == 'edit' || operation == 'add') && controller.submit !== undefined" ng-click="controller.submit()">Submit</button>    <button type="submit" class="btn btn-primary" ng-disabled="enableSubmit === false || form.$invalid"            ng-if="(operation == 'edit' || operation == 'add') && includeSave != undefined && controller.save !== undefined" ng-click="controller.save()">Save</button>    <button type="submit" class="btn btn-primary" ng-click="controller.close()"  ng-if="operation == 'read' && controller.close !== undefined">Close</button>    <button type="submit" class="btn btn-primary" ng-click="controller.revert()" ng-if="(operation == 'edit' || operation == 'add') && controller.revert !== undefined">Revert</button></div><div>    entity.changePending = {{entity.changePending}},operation{{operation}} ,hasWriteAccess{{hasWriteAccess}}    <div ng-if="operation === 'read'">        <div ng-if="entity.changePending === false && !hasWriteAccess"><img ng-src="{{readOnly}}"/><span class="h4 text-center">{{title}}</span></div>        <div ng-if="entity.changePending === false && hasWriteAccess"><img ng-src="{{editable}}"/><span class="h4 text-center">{{title}}</span></div>    </div>    <div ng-if="operation == 'edit' || operation == 'add'"><img ng-src="{{editing}}"/><span class="h4 text-center" >{{title}}</span></div>    <div ng-if="entity.changePending && operation !== 'edit' && operation !== 'add'"><img ng-src="{{changePending}}"/><span class="h4 text-center" >{{title}}</span></div>    <div ng-if="entity.state === 'REPAIR'"><img ng-src="{{needsRepair}}"/><span class="h4 text-center">{{title}}</span></div>    <div ng-if="entity.state === 'FUTURE'"><img ng-src="{{future}}"/><span class="h4 text-center" >{{title}}</span></div>    <div ng-if="entity.state === 'SUBMIT'"><img ng-src="{{needsApproval}}"/><span class="h4 text-center" >{{title}}</span></div></div><div>    <div class="modal-body">        <div class="form-horizontal" style="min-width: 500px">            {{sriErrorCtrl.alertText}}        </div>    </div>    <div class="modal-footer">        <button type="submit" class="btn btn-primary" ng-click="sriErrorCtrl.okButtonAction()" ng-if="sriErrorCtrl.alertParams.okButtonAction !== undefined">OK</button>        <button type="submit" class="btn btn-primary" ng-click="sriErrorCtrl.cancelButtonAction()" ng-if="sriErrorCtrl.alertParams.cancelButtonAction !== undefined">{{sriErrorCtrl.cancelButtonText}}</button>    </div></div><div  ng-show="operation != 'add'" ng-class="pdfclass" >    <button  id="img_container" style="position: absolute;cursor: pointer; cursor: hand;" ng-click="onPdf()"> </button></div>$templateCache.put("app/templates/sri-pdf-report.html","<div ng-show=\"operation != \'add\'\" ng-class=pdfclass><button id=img_container style=\"position: absolute;cursor: pointer; cursor: hand;\" ng-click=onPdf()></button></div>");}]);
