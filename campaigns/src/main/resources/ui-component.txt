angular.module('sri.customTag.module',['ui.grid', 'ui.bootstrap.dateparser', 'ui.bootstrap.datepicker', 'ui.bootstrap.timepicker', 'ui.grid.autoResize', 'ui.grid.saveState',    'ui.grid.resizeColumns', 'ui.grid.moveColumns' , 'ui.grid.grouping' , 'ui.grid.selection', 'ui.grid.cellNav']);angular.module('Sri.customTag.module').config(['$controllerProvider', '$compileProvider', '$provide', 'CONFIG_PARAMS', function($controllerProvider, $compileProvider, $provide, CONFIG_PARAMS) {    var providers = {        $controllerProvider: $controllerProvider,        $compileProvider: $compileProvider,        $provide: $provide    };    CONFIG_PARAMS.CONTROLLER_PROVIDER = providers;}]);/** * */SriAlertCtrl.$inject = ["$modalInstance", "alertParams"];angular.module('Sri.customTag.module').controller('SriAlertCtrl', SriAlertCtrl);function SriAlertCtrl($modalInstance, alertParams) {    this.alertText = alertParams.alertText;    this.okButtonText = alertParams.okButtonText;    this.cancelButtonText = alertParams.cancelButtonText;    this.alertParams = alertParams;    if(alertParams.okButtonText === undefined) {        this.okButtonText = 'OK';    }    if(alertParams.cancelButtonText === undefined) {        this.cancelButtonText = 'Cancel';    }    this.okButtonAction = function () {        if(alertParams.okButtonAction !== undefined) {            alertParams.okButtonAction();        }        $modalInstance.close('SUCCESS');    };    this.cancelButtonAction = function () {        if(alertParams.cancelButtonAction !== undefined) {            alertParams.cancelButtonAction();        }        $modalInstance.dismiss('CANCEL');    };}/** * */SriCommentCtrl.$inject = ["$modalInstance", "exclude"];angular.module('Sri.customTag.module').controller('SriCommentCtrl', SriCommentCtrl);function SriCommentCtrl($modalInstance, exclude) {    this.today = new Date();    this.commentsData = {};    this.enbaleDatePicker = false;    this.excludeComment = exclude.excludeComment === undefined ? false : exclude.excludeComment;    this.excludeDateTime = exclude.excludeDateTime === undefined ? false : exclude.excludeDateTime;    this.init = function() {        if(this.excludeDateTime === false) {            this.effectiveDate = new Date();        }        if(exclude.effectiveDate !== undefined) {            this.effectiveDate = exclude.effectiveDate;            this.enbaleDatePicker = true;        }    };    this.init();    this.submitComments = function () {        $modalInstance.close(this.commentsData);    };    this.close = function () {        $modalInstance.dismiss('cancel');    };}HistPanelCtrl.$inject = ["$scope", "$uibModalInstance", "modalParams", "SriApiService", "uiGridConstants", "$q"];angular.module('Sri.customTag.module').controller('histPanelCtrl', HistPanelCtrl);function HistPanelCtrl($scope, $uibModalInstance, modalParams,SriApiService,uiGridConstants, $q) {    this.changeData=[];    this.id=modalParams.id;    this.changeUUID=modalParams.id;    this.account = modalParams.account;    this.ledger = modalParams.ledger;    this.profile = modalParams.profile;    this.customerHeader = '';    var vm=this;    this.init = function() {        this.showChanges=false;        this.loadAll();    };    this.gridOptions = {        columnDefs: [            { field: 'modifiedBy', displayName: 'User'},            { field: 'comments', displayName: 'Comment'},            {                field: 'modifiedDate',                displayName: 'Date',                cellFilter: 'date:"yyyy-MM-dd HH:mm:ss"'            }        ],        onRegisterApi: function (gridApi) {            this.gridApi = gridApi;            //  gridApi.selection.on.rowSelectionChanged($scope,onRowSelect.bind(row));            gridApi.selection.on.rowSelectionChanged(null, vm.onRowSelect.bind(vm));            // gridApi.cellNav.on.navigate(null, vm.onCellSelect.bind(vm));        },        enableHorizontalScrollbar : uiGridConstants.scrollbars.NEVER,        enableColumnResizing: true,        enableColumnReordering: true,        enableRowSelection: true,        enableRowHeaderSelection: false,        multiSelect:false,    };    this.historyGrid = {        columnDefs: [            {name: 'state', displayName: "State"},            {name: 'modifiedBy', displayName: "User"},            {name: 'comments', displayName: "Comment"},            {name: "modifiedDate", displayName: "modifiedDate", cellFilter: 'date:"yyyy-MM-dd HH:mm:ss"'}        ],        enableCellEditOnFocus: false,        enableHorizontalScrollbar: uiGridConstants.scrollbars.NEVER,    };    vm.gridOptions.appScopeProvider = vm;    this.onRowSelect = function(selectedRow) {        this.changeUUID=selectedRow.entity.changeUUID;        this.load();    }.bind(this);    this.load = function() {        this.changeData=[];        function historyPromise(entityUUID, changeUUID) {            var filter = "entityUUID::" + entityUUID + "|";            filter = filter + "changeUUID::" + changeUUID + "|";            var params = angular.merge({}, {filter: filter, all: "all"}, {                sortBy: "modifiedDate",                sortOrder: "DESC"            });            var jsonObject = {                "url":  '/Sri-web/history/',                "params": params            };            return SriApiService.invoke(jsonObject);        }        function historyChangePromise(changeUUID) {            var params = {                url: '/Sri-web/history/historyChangeId/:Id',                params: {Id: changeUUID}            };            return SriApiService.invoke(params);        }        var _this = this;        $q.all([historyPromise(_this.id, _this.changeUUID), historyChangePromise(_this.changeUUID)]).then(function (result) {            _this.changeData.push(JSON.parse(result[1].entity));            _this.historyGrid.data=result[0].entity;            _this.showChanges=true;        });    };    this.loadAll = function() {        var _this = this;        _this.customerHeader='';        console.log("account number="+_this.account);        console.log("ledger="+_this.ledger);        var  filter= 'filter=entityUUID::' +this.id + "|";        filter = filter + "state::" + 'LIVE' + "|";        if(_this.account !== undefined && _this.ledger !== undefined){            console.log('accountNo =',_this.account);            filter = filter + "profile::CUSTOMER|";            filter = filter + "accountNo::" + _this.account + "|";            filter = filter + "ledger::" + _this.ledger + "|";            _this.customerHeader =' : '+_this.ledger +' - '+_this.account;        }        console.log('filter*** =',filter);        var request = {            url: '/Sri-web/history/?:filter',            method: "GET",            params: {                id: _this.uuid,                filter:filter            }        };        //        //var request =  {        //    url: HISTORY_CONSTANTS.getAll.url,        //    method: HISTORY_CONSTANTS.getAll.method,        //    params: {        //        id: _this.uuid        //    }        //};        SriApiService.invoke(request,filter).then(function (response) {            _this.populateInitValues(response);        });    };    this.populateInitValues = function(response) {        this.historyOfInterest = response.entity;        this.original = angular.copy(response.entity);        this.gridOptions.data=response.entity;    };    this.close = function () {        $uibModalInstance.close();    };    this.init();}CurrencyReviewCtrl.$inject = ["$scope", "$uibModalInstance", "modalParams", "$q"];angular.module('Sri.customTag.module').controller('SriReviewCtrl', CurrencyReviewCtrl);function CurrencyReviewCtrl($scope, $uibModalInstance, modalParams,  $q) {    this.changeData=[];    this.gridService =modalParams.gridService;    this.alertFactory = modalParams.alertFactory;    this.init = function() {       // this.changeData = modalParams.changeData;    };    angular.forEach(modalParams.changeData, function (value) {        this.changeData.push(JSON.parse(value));    }.bind(this));    this.close = function () {        $uibModalInstance.close();               if(this.gridService !== undefined && this.gridService!==null){            this.gridService.refreshGrid();        }  if(this.alertFactory !== undefined && this.alertFactory!==null){            this.alertFactory.addSuccessAlert('Transaction has been submitted successfully');        }    };    this.init();}SriSearchPanelCtrl.$inject = ["$modalInstance", "url", "callBackOnSelect"];angular.module('Sri.customTag.module').controller('SriSearchPanelCtrl', SriSearchPanelCtrl);function SriSearchPanelCtrl($modalInstance, url, callBackOnSelect) {    callBackOnSelect.onRowSelect = function(selectedRow, searchParams) {        var returnValue = {entity : selectedRow.entity, searchValues : searchParams};        this.closeButtonAction(returnValue);    }.bind(this);    this.includeURL = function() {        return url;    };    this.closeButtonAction = function (selectedRow) {        $modalInstance.close(selectedRow);    };    this.cancelButtonAction = function () {        $modalInstance.dismiss('CANCEL');    };}/** * Created by U445701 on 3/6/2016. */angular.module('Sri.customTag.module').controller('SriTestCtrl', SriTestCtrl);function SriTestCtrl() {   // this.mytest1 = "[{\"infoList\":[{\"text\":\"Currency Modified\",\"fontStyle\":\"text-medium-b\"}],\"tables\":[{\"tableInfoList\":[],\"tableRowList\":[{\"rowCells\":[{\"text\":\"\",\"fontStyle\":\"text-medium-b-bg\",\"cellSpan\":\"\"},{\"text\":\"From\",\"fontStyle\":\"text-medium\",\"cellSpan\":\"\"},{\"text\":\"To\",\"fontStyle\":\"text-medium-b-h\",\"cellSpan\":\"\"}]},{\"rowCells\":[{\"text\":\"Currency Code\",\"fontStyle\":\"text-medium-b-bg\",\"cellSpan\":\"\"},{\"text\":\"NZD\",\"fontStyle\":\"text-medium\",\"cellSpan\":\"\"},{\"text\":\"NZD\",\"fontStyle\":\"text-medium\",\"cellSpan\":\"\"}]},{\"rowCells\":[{\"text\":\"Currency Name\",\"fontStyle\":\"text-medium-b-bg\",\"cellSpan\":\"\"},{\"text\":\"NEW ZEALAND DOLLAR\",\"fontStyle\":\"text-medium\",\"cellSpan\":\"\"},{\"text\":\"NEW ZEALAND DOLLAR\",\"fontStyle\":\"text-medium\",\"cellSpan\":\"\"}]},{\"rowCells\":[{\"text\":\"Active\",\"fontStyle\":\"text-medium-b-bg\",\"cellSpan\":\"\"},{\"text\":\"X\",\"fontStyle\":\"text-medium\",\"cellSpan\":\"\"},{\"text\":\"X\",\"fontStyle\":\"text-medium\",\"cellSpan\":\"\"}]},{\"rowCells\":[{\"text\":\"Base Currency\",\"fontStyle\":\"text-medium-b-bg\",\"cellSpan\":\"\"},{\"text\":\" \",\"fontStyle\":\"text-medium\",\"cellSpan\":\"\"},{\"text\":\" \",\"fontStyle\":\"text-medium\",\"cellSpan\":\"\"}]},{\"rowCells\":[{\"text\":\"Min Pay Limit\",\"fontStyle\":\"text-medium-b-bg\",\"cellSpan\":\"\"},{\"text\":\"50\",\"fontStyle\":\"text-medium\",\"cellSpan\":\"\"},{\"text\":\"500\",\"fontStyle\":\"text-medium-b-h\",\"cellSpan\":\"\"}]},{\"rowCells\":[{\"text\":\"Max Pay Limit\",\"fontStyle\":\"text-medium-b-bg\",\"cellSpan\":\"\"},{\"text\":\"15000\",\"fontStyle\":\"text-medium\",\"cellSpan\":\"\"},{\"text\":\"15000\",\"fontStyle\":\"text-medium\",\"cellSpan\":\"\"}]},{\"rowCells\":[{\"text\":\"Split Advice Eligible\",\"fontStyle\":\"text-medium-b-bg\",\"cellSpan\":\"\"},{\"text\":\"X\",\"fontStyle\":\"text-medium\",\"cellSpan\":\"\"},{\"text\":\"X\",\"fontStyle\":\"text-medium\",\"cellSpan\":\"\"}]},{\"rowCells\":[{\"text\":\"Non Decimal Currency\",\"fontStyle\":\"text-medium-b-bg\",\"cellSpan\":\"\"},{\"text\":\" \",\"fontStyle\":\"text-medium\",\"cellSpan\":\"\"},{\"text\":\" \",\"fontStyle\":\"text-medium\",\"cellSpan\":\"\"}]}]}]}]";    //this.mytest2={"infoList":[{"text":"Currency Modified","fontStyle":"text-medium-b"}],"tables":[{"tableInfoList":[],"tableRowList":[{"rowCells":[{"text":"","fontStyle":"text-medium-b-bg","cellSpan":""},{"text":"From","fontStyle":"text-medium","cellSpan":""},{"text":"To","fontStyle":"text-medium-b-h","cellSpan":""}]},{"rowCells":[{"text":"Currency Code","fontStyle":"text-medium-b-bg","cellSpan":""},{"text":"NOK","fontStyle":"text-medium","cellSpan":""},{"text":"NOK","fontStyle":"text-medium","cellSpan":""}]},{"rowCells":[{"text":"Currency Name","fontStyle":"text-medium-b-bg","cellSpan":""},{"text":"NORWEIGAN KRONER","fontStyle":"text-medium","cellSpan":""},{"text":"NORWEIGAN KRONERKK","fontStyle":"text-medium-b-h","cellSpan":""}]},{"rowCells":[{"text":"Active","fontStyle":"text-medium-b-bg","cellSpan":""},{"text":"X","fontStyle":"text-medium","cellSpan":""},{"text":"X","fontStyle":"text-medium","cellSpan":""}]},{"rowCells":[{"text":"Base Currency","fontStyle":"text-medium-b-bg","cellSpan":""},{"text":" ","fontStyle":"text-medium","cellSpan":""},{"text":" ","fontStyle":"text-medium","cellSpan":""}]},{"rowCells":[{"text":"Min Pay Limit","fontStyle":"text-medium-b-bg","cellSpan":""},{"text":"50","fontStyle":"text-medium","cellSpan":""},{"text":"51","fontStyle":"text-medium-b-h","cellSpan":""}]},{"rowCells":[{"text":"Max Pay Limit","fontStyle":"text-medium-b-bg","cellSpan":""},{"text":"15000","fontStyle":"text-medium","cellSpan":""},{"text":"15000","fontStyle":"text-medium","cellSpan":""}]},{"rowCells":[{"text":"Split Advice Eligible","fontStyle":"text-medium-b-bg","cellSpan":""},{"text":"X","fontStyle":"text-medium","cellSpan":""},{"text":"X","fontStyle":"text-medium","cellSpan":""}]},{"rowCells":[{"text":"Non Decimal Currency","fontStyle":"text-medium-b-bg","cellSpan":""},{"text":" ","fontStyle":"text-medium","cellSpan":""},{"text":" ","fontStyle":"text-medium","cellSpan":""}]}]}]}";    this.mytest2='hjjjj';    this.mySearch = function () {        console.lg('mysearch');    };}angular.module('Sri.customTag.module').constant('CONFIG_PARAMS', {    CONTROLLER_PROVIDER: undefined});angular.module("Sri.customTag.module").run(["$templateCache", function($templateCache) {$templateCache.put("app/templates/history-panel.html","<div><Sri-spinner></Sri-spinner><div class=modal-header><h3 class=modal-title>History {{ histPanelCtrl.customerHeader }}</h3></div><div class=modal-body><Sri-fieldset label-name=Modifications><div id=grid1 style=\"height: 200px;\" ui-grid=histPanelCtrl.gridOptions ui-grid-selection></div></Sri-fieldset><div ng-if=histPanelCtrl.showChanges><Sri-fieldset label-name=Changes><Sri-history-details data=histPanelCtrl.changeData></Sri-history-details></Sri-fieldset></div><div ng-if=histPanelCtrl.showChanges><Sri-fieldset label-name=History><div style=\"height: 200px;\" ui-grid=histPanelCtrl.historyGrid class=grid></div></Sri-fieldset></div></div><div class=modal-footer><button class=\"btn btn-primary\" type=button ng-click=histPanelCtrl.close()>Close</button></div></div>");$templateCache.put("app/templates/Sri-alert.html","<div><div class=modal-body><div class=form-horizontal style=\"min-width: 500px\">{{SriAlertCtrl.alertText}}</div></div><div class=modal-footer><button type=submit class=\"btn btn-primary\" ng-click=SriAlertCtrl.okButtonAction() ng-if=\"SriAlertCtrl.alertParams.okButtonAction !== undefined\">{{SriAlertCtrl.okButtonText}}</button> <button type=submit class=\"btn btn-primary\" ng-click=SriAlertCtrl.cancelButtonAction() ng-if=\"SriAlertCtrl.alertParams.cancelButtonAction !== undefined\">{{SriAlertCtrl.cancelButtonText}}</button></div></div>");$templateCache.put("app/templates/Sri-business-errors.html","<div class=\"has-error pull-left div-scroll\"><ul ng-if=\"SriBusinessErrors.length > 0\"><li ng-repeat=\"error in SriBusinessErrors\"><p class=help-block style=\"text-align: left\">{{error}}</p></li></ul></div>");$templateCache.put("app/templates/Sri-comment-date.html","<div><div class=modal-body><form name=form class=form-horizontal role=form novalidate style=\"min-width: 600px\"><Sri-text-area label=Comments name=comment type=text required=true max-length=128 Sri-model=SriCommentCtrl.commentsData.comments label-class=\"col-md-2 control-label text-left\" input-class=\"col-md-10 text-left\" rows=4 ng-if=\"SriCommentCtrl.excludeComment === false\"></Sri-text-area><div class=form-group ng-if=\"SriCommentCtrl.excludeDateTime === false\"><a ng-click=\"SriCommentCtrl.enbaleDatePicker = true\" ng-show=!SriCommentCtrl.enbaleDatePicker>Future Effective Date</a><Sri-date-time-picker name=\"Effective Date\" min-date=SriCommentCtrl.today Sri-date-model=SriCommentCtrl.commentsData.effectiveDate ng-show=SriCommentCtrl.enbaleDatePicker></Sri-date-time-picker></div></form></div><div class=modal-footer><button type=submit class=\"btn btn-primary\" ng-click=SriCommentCtrl.submitComments() ng-disabled=form.$invalid>Submit</button> <button type=submit class=\"btn btn-primary\" ng-click=SriCommentCtrl.close()>Close</button></div></div>");$templateCache.put("app/templates/Sri-datetimepicker.html","<div><table><tbody><tr><td class=col-md-2><label>{{name}}</label></td><td><div class=input-group><input type=text class=form-control readonly uib-datepicker-popup ng-model=SriDateModel min-date=minDate datepicker-options=datePickerOptions ng-required={{required}} close-text=Close is-open=openDatePicker show-weeks=false> <span class=input-group-btn><button type=button class=\"btn btn-default\" ng-click=\"openDatePicker=true\"><i class=\"fa fa-calendar\"></i></button></span></div></td><td>&nbsp;</td><td><uib-timepicker ng-model=SriDateModel hour-step=1 minute-step=0 show-meridian=true readonly-input=true arrow-keys=false></uib-timepicker></td></tr></tbody></table></div>");$templateCache.put("app/templates/Sri-errorMessage.html","<div class=help-block ng-messages=errorhandler.$error ng-show=\"errorhandler.$dirty && errorhandler.$touched && errorhandler.$invalid\"><p ng-message=required>Required field</p><p ng-message=minlength>Minimum length of this field is {{minlength}}</p><p ng-message=maxlength>Maximum length of this field is {{maxlength}}</p><p ng-message=alphaNumeric>This Field accepts Alpha Numeric Only</p><p ng-message=alphaNumericSpace>This Field accepts Alpha Numeric with Spaces Only</p><p ng-message=alpha>This Field accepts Alphabet Only</p><p ng-message=numeric>This Field accepts Numbers Only</p><p ng-message=alphaNumericSpicalchar>This Field accepts Alpha Numeric with Special characters Only\"</p><p ng-message=pattern>Invalid format.</p><div scope=col ng-repeat=\"error in customErrors track by $index\"><p>{{error}}</p></div></div>");$templateCache.put("app/templates/Sri-fieldset.html","<fieldset class={{fieldsetBorder}}><legend class=\"scheduler-border {{labelStyle}}\">{{labelName}}</legend><div ng-class=\"{ \'fieldset-scroll\': scrollBarEnable}\"><ng-transclude></ng-transclude></div></fieldset>");$templateCache.put("app/templates/Sri-history-details.html","<div ng-repeat=\"dataList in data\"><div ng-repeat=\"info in dataList.infoList\"><div class={{info.fontStyle}}>{{info.text}}</div><br></div><div ng-repeat=\"table in dataList.tables\"><div ng-repeat=\"info in table.tableInfoList\"><div class={{info.fontStyle}}>{{info.text}}</div><br></div><table border=1 ng-hide=\"table.tableRowList.length ==0\"><tr ng-repeat=\"row in table.tableRowList\"><td style=\"padding: 5px; text-align: center\" ng-repeat=\"cell in row.rowCells\" class={{cell.fontStyle}} colspan={{cell.cellSpan}}>{{cell.text}}</td></tr></table><br></div></div>");$templateCache.put("app/templates/Sri-history-info.html","<div><a href=#><img src=/Sri-web-domain/scripts/node_modules/Sri-ui/node_modules/Sri-ui-systemscan/images/details.gif uib-tooltip=history ng-click=onHistorySelect()></a></div>");$templateCache.put("app/templates/Sri-input-checkbox.html","<div ng-class=\"{\'required\' : required}\"><label ng-class=labelClass ng-if=\"label !== undefined\">{{label}}</label><div class={{inputClass}}><input type=checkbox name={{name}} ng-model=SriModel ng-disabled=SriDisabled ng-required={{required}}></div></div>");$templateCache.put("app/templates/Sri-input-search.html","<div ng-class=\"{\'required\' : required}\"><label ng-class=labelClass ng-if=\"label !== undefined\">{{label}}</label><div class={{inputClass}} ng-class=\"{\'has-error\': errorhandler.$dirty && errorhandler.$touched && errorhandler.$invalid, \'has-success\' : errorhandler.$dirty && errorhandler.$touched && errorhandler.$valid}\"><div class=input-group><input class=form-control type={{type}} name={{name}} pattern={{pattern}} ng-minlength={{minLength}} ng-maxlength={{maxLength}} maxlength={{maxLength}} ng-model=SriModel ng-disabled=SriDisabled ng-required={{required}} Sri-upper-case aria-describedby=search> <span class=input-group-addon type=submit><i class=\"glyphicon glyphicon-search\"></i></span></div><validation-error forname={{name}} minlength={{minLength}} maxlength={{maxLength}}></validation-error></div></div>");$templateCache.put("app/templates/Sri-input.html","<div ng-class=\"{\'required\' : required}\"><label ng-class=labelClass ng-if=\"label !== undefined\">{{label}}</label><div class={{inputClass}} ng-class=\"{\'has-error\': errorhandler.$dirty && errorhandler.$touched && errorhandler.$invalid, \'has-success\' : errorhandler.$dirty && errorhandler.$touched && errorhandler.$valid}\"><input class=form-control type={{type}} name={{name}} pattern={{pattern}} ng-minlength={{minLength}} ng-maxlength={{maxLength}} maxlength={{maxLength}} ng-model=SriModel ng-disabled=SriDisabled ng-required={{required}} Sri-filter Sri-custom-error-display><validation-error forname={{name}} minlength={{minLength}} maxlength={{maxLength}} custom-errors=customErrors></validation-error></div></div>");$templateCache.put("app/templates/Sri-number-input.html","<div ng-class=\"{\'required\' : required}\"><label ng-class=labelClass ng-if=\"label !== undefined\">{{label}}</label><div class={{inputClass}} ng-class=\"{\'has-error\': errorhandler.$dirty && errorhandler.$touched && errorhandler.$invalid, \'has-success\' : errorhandler.$dirty && errorhandler.$touched && errorhandler.$valid}\"><input class=form-control type={{type}} name={{name}} ng-minlength={{minLength}} ng-maxlength={{maxLength}} maxlength={{maxLength}} ng-model=SriModel></div></div>");$templateCache.put("app/templates/Sri-search-input.html","<div ng-class=\"{\'required\' : required}\"><label ng-class=labelClass ng-if=\"label !== undefined\">{{label}}</label><div class={{inputClass}} ng-class=\"{\'has-error\': errorhandler.$dirty && errorhandler.$touched && errorhandler.$invalid, \'has-success\' : errorhandler.$dirty && errorhandler.$touched && errorhandler.$valid}\"><input class=form-control type={{type}} name={{name}} search-pattern=true ng-minlength={{minLength}} ng-maxlength={{maxLength}} maxlength={{maxLength}} ng-model=SriModel Sri-filter><validation-error forname={{name}} minlength={{minLength}} maxlength={{maxLength}} custom-errors=customErrors></validation-error></div></div>");$templateCache.put("app/templates/Sri-search-panel.html","<div><div class=modal-body><ng-include src=SriSearchPanelCtrl.includeURL()></ng-include></div><div class=modal-footer><button type=submit class=\"btn btn-primary\" ng-click=SriSearchPanelCtrl.cancelButtonAction()>Close</button></div></div>");$templateCache.put("app/templates/Sri-select.html","<div ng-class=\"{\'required\' : required}\"><label ng-class=labelClass ng-if=\"label !== undefined\">{{label}}</label><div class={{inputClass}} ng-class=\"{\'has-error\': errorhandler.$dirty && errorhandler.$touched && errorhandler.$invalid, \'has-success\' : errorhandler.$dirty && errorhandler.$valid}\"><select class=form-control name={{name}} ng-selected=selected ng-disabled=SriDisabled ng-click=updateValue() ng-options={{optionEval}} ng-model=SriModel ng-required={{required}}><option>- Please Select -</option></select></div></div>");$templateCache.put("app/templates/Sri-textarea.html","<div ng-class=\"{\'required\' : required}\" class=form-group><label ng-class=labelClass>{{label}}</label><div class={{inputClass}} ng-class=\"{\'has-error\': errorhandler.$dirty && errorhandler.$touched && errorhandler.$invalid, \'has-success\' : errorhandler.$dirty && errorhandler.$valid}\"><textarea class=form-control type={{type}} name={{name}} pattern={{pattern}} ng-minlength={{minLength}} ng-maxlength={{maxLength}} ng-model=SriModel ng-disabled=SriDisabled ng-required={{required}} rows={{rows}}></textarea><validation-error forname={{name}} minlength={{minLength}} maxlength={{maxLength}}></validation-error></div></div>");$templateCache.put("app/templates/Sri-ui-grid.html","<div><div id=grid ui-grid=vm.gridValues ui-grid-resize-columns ui-grid-selection ui-grid-move-columns ui-grid-save-state ui-grid-auto-resize class=grid-height></div><div class=text-center ng-if=\"vm.disablePagination === undefined\"><uib-pagination direction-links=true boundary-links=true total-items=vm.paginationInfo.totalResults items-per-page=vm.paginationInfo.pageSize max-size=vm.paginationInfo.maxSize rotate=false num-pages=numPages ng-model=vm.paginationInfo.currentPage ng-change=vm.getData()></uib-pagination></div></div>");$templateCache.put("app/templates/Sri-ui-multiSelect-grid.html","<div><div id=grid ui-grid=vm.gridValues ui-grid-resize-columns ui-grid-selection ui-grid-move-columns ui-grid-cellnav ui-grid-save-state ui-grid-auto-resize class=grid-height></div><div class=text-center ng-if=\"vm.disablePagination === undefined\"><uib-pagination direction-links=true boundary-links=true total-items=vm.paginationInfo.totalResults items-per-page=vm.paginationInfo.pageSize max-size=vm.paginationInfo.maxSize rotate=false num-pages=numPages ng-model=vm.paginationInfo.currentPage ng-change=vm.getData()></uib-pagination></div></div>");$templateCache.put("app/templates/reviewModalView.html","<div class=reviewPanel><Sri-spinner></Sri-spinner><div class=modal-header><h3 class=modal-title>Changes Submitted</h3></div><div class=modal-body><Sri-fieldset label-name=Changes scroll-bar=true><Sri-history-details class=col-md-11 data=SriReviewCtrl.changeData></Sri-history-details></Sri-fieldset></div><div class=modal-footer><button class=\"btn btn-primary\" type=button ng-click=SriReviewCtrl.close()>Close</button></div></div>");}]);angular.module('Sri.customTag.module').directive('SriAlphaNumeric', SriAlphaNumeric);function SriAlphaNumeric() {    return {        restrict: 'A',        require: "?ngModel",        link: SriAlphaNumericLink,    };}function SriAlphaNumericLink(scope, element, attributes, ngModelCtrl) {    if(ngModelCtrl === undefined || ngModelCtrl === null) {        return;    }    var pattern=/^[A-Za-z0-9]+$/;    if(attributes.searchPattern ==="true"){        pattern=/^[A-Za-z0-9*]+$/;    }    ngModelCtrl.$validators.alphaNumeric = function(modelValue) {        if(modelValue === null){            ngModelCtrl.$setViewValue(undefined);        }        if(modelValue === undefined || modelValue ===''){            return true;        }        var valid = pattern.test(modelValue);        if(!valid){            ngModelCtrl.$setDirty();            return false;        }        return true;    };}angular.module('Sri.customTag.module').directive('SriBusinessValidationErrors', SriBusinessValidationErrors);function SriBusinessValidationErrors() {    return {        restrict: 'E',        replace: true,        scope: {            SriBusinessErrors: "=",        },        templateUrl: SriBusinessValidationTemplateUrl,        link: SriBusinessValidationLink,    };}function SriBusinessValidationTemplateUrl(elem, attrs) {    return 'app/templates/Sri-business-errors.html';}function SriBusinessValidationLink(scope, element, attributes) {    if(Array.isArray(scope.SriBusinessErrors) === false) {        throw "Business Validation Errors not an Array";    }}/** * */angular.module('Sri.customTag.module').directive('SriCustomAsyncValidation', SriCustomAsyncValidation);function SriCustomAsyncValidation() {    return {        restrict: 'A',        require: "ngModel",        link: SriCustomAsyncValidationLink,    };}function SriCustomAsyncValidationLink(scope, element, attributes, ngModelCtrl) {    if(scope.customValidation === undefined) {        return;    }    ngModel.$asyncValidators.asyncValidation = function(modelValue) {        var defer = $q.defer();        if(scope.customValidation({value: modelValue})) {                defer.resolve();        } else {                defer.reject();        }        return defer.promise;    };}angular.module('Sri.customTag.module').directive('SriCustomErrorDisplay', SriCustomErrorDisplay);function SriCustomErrorDisplay() {    return {        restrict: 'A',        require: "?ngModel",        link: SriCustomErrorDisplayLink,    };}function SriCustomErrorDisplayLink(scope, element, attributes, ngModelCtrl) {    if(ngModelCtrl === undefined){        return;    }    ngModelCtrl.$validators.customErrorDisplay = function(modelValue) {        if(scope.customErrors === undefined) {            return true;        }        return scope.customErrors !== undefined && scope.customErrors.length === 0;    };}/** * */angular.module('Sri.customTag.module').directive('SriCustomValidation', SriCustomValidation);function SriCustomValidation() {    return {        restrict: 'A',        require: "ngModel",        link: SriCustomValidationLink,    };}function SriCustomValidationLink(scope, element, attributes, ngModelCtrl) {   if(scope.customValidation === undefined) {        return;    }    ngModelCtrl.$validators.customValidation = function(modelValue) {        if(scope.customValidation !== undefined) {            return scope.customValidation({value: modelValue});        }   };}/** * */angular.module('Sri.customTag.module').directive('SriDateTimePicker', SriDateTimePicker);function SriDateTimePicker() {    return {        restrict: 'E',        replace: true,        scope: {            SriDateModel: "=",            name: '@',            required: "@",            minDate: "=",        },        templateUrl: SriDateTimeTemplateUrl,        link: SriDateTimeLink,    };}function SriDateTimeTemplateUrl(elem, attrs) {    return 'app/templates/Sri-datetimepicker.html';}function SriDateTimeLink(scope, element, attributes) {    scope.openDatePicker = false;}/** * */    SriFieldset.$inject = ["$compile"];angular.module('Sri.customTag.module').directive('SriFieldset', SriFieldset);    function SriFieldset($compile) {        return {            restrict: 'E',            replace: true,            scope: {                labelName: '@',               // disableFields: '=',//try to Stop two way databinding on model.                labelStyle: "@",                noBorder:"@",                scrollBar:"@",            },            transclude: true,            link: SriFieldsetLink,            templateUrl: 'app/templates/Sri-fieldset.html',        };    }    function SriFieldsetLink(scope, element, attributes) {        if(scope.labelStyle=== undefined) {            scope.labelStyle = "legendStyle";        }        if(scope.noBorder=== undefined){            scope.fieldsetBorder="scheduler-border";        } else{            scope.fieldsetBorder="";        }        if(scope.scrollBar !== undefined){            scope.scrollBarEnable=true;            scope.scrollBarStyleClass="fieldset-scroll";        }     /*   if(scope.disableFields===true){            element.attr('disabled', ' ');        }*/    }angular.module('Sri.customTag.module').directive('SriFilter', SriFilter);function SriFilter() {        return {            require: 'ngModel',            restrict: 'A',            link: SriFilterLink,        };}function SriFilterLink(scope, element, attrs, modelCtrl) {        modelCtrl.$parsers.push(function(inputValue) {            if (inputValue === undefined)                return '';            var cleanInputValue = inputValue.replace(/[%<>+;]/g,'');            var uppcaseCleanInputValue='';            if(scope.allowLowerCase === undefined) {                uppcaseCleanInputValue = cleanInputValue.toUpperCase();            }else{                uppcaseCleanInputValue=cleanInputValue;            }            if (cleanInputValue != inputValue) {                modelCtrl.$setViewValue(uppcaseCleanInputValue);                modelCtrl.$render();            }            return uppcaseCleanInputValue;        });    if(scope.allowLowerCase === undefined) {        element.css("text-transform", "uppercase");    }}/** * */angular.module('Sri.customTag.module').directive('SriHistoryDetails', SriHistoryDetails);    function SriHistoryDetails() {        return {            restrict: 'E',            replace: true,            scope: {                data: '=',            },            templateUrl: 'app/templates/Sri-history-details.html',        };    }/** * */SriHistoryInfo.$inject = ["historyModalPanelService"];angular.module('Sri.customTag.module').directive('SriHistoryInfo', SriHistoryInfo);function SriHistoryInfo(historyModalPanelService) {    return {        restrict: 'E',        replace: true,        scope: {            id: '=',            profile: '@',            account: '=',            ledger: '=',        },        templateUrl: 'app/templates/Sri-history-info.html',        link: function (scope, element, attributes) {            scope.onHistorySelect = function() {                historyModalPanelService.modalOpen('tr-lg',scope.id, scope.profile, scope.account, scope.ledger);            };        }    };}/** * */    SriInput.$inject = ["$compile"];angular.module('Sri.customTag.module').directive('SriInput', SriInput);    function SriInput($compile) {        return {            restrict: 'E',            replace: true,            require: ['?^form'],            scope: {                type: "@",                SriModel: "=",                label: '@',                name: "@",                minLength: "@",                maxLength: "@",                pattern: "@",                SriDisabled: "=",                required: "@",                trim: "@",                labelClass: "@",                inputClass: "@",                allowLowerCase: "@",                externalSearch: "&",                customErrors: "="            },            templateUrl: SriInputTemplateUrl,            link: function(scope, element, attributes, controller) {                var formController = controller[0];                appendValidationDirectives(element, attributes);                $compile(element)(scope);                if (formController) {                    scope.errorhandler = formController[scope.name];                }                if(scope.inputClass=== undefined) {                    scope.inputClass = "col-md-2";                }                if(scope.labelClass=== undefined) {                    scope.labelClass = "col-md-1";                }                scope.regexPattern = new RegExp(scope.pattern);                var spanElem = element.find('span');                spanElem.bind("click", function(){                    scope.externalSearch();                });            },        };    }    function appendValidationDirectives(element, attributes) {        var inputElement = element.find('input');        if(attributes.SriAlphaNumeric !== undefined) {            inputElement.attr('Sri-alpha-numeric', '');        }        if(attributes.SriAlphaNumericSpace !== undefined){            inputElement.attr('Sri-alpha-numeric-space', '');        }        if(attributes.SriAlpha !== undefined){            inputElement.attr('Sri-alpha', '');        }        if(attributes.SriNumeric !== undefined){            inputElement.attr('Sri-numeric', '');        }        if(attributes.SriCodewordValidation !== undefined){            inputElement.attr('Sri-codeword-validation', attributes.SriCodewordValidation);        }        if(attributes.SriPatternValidation !== undefined){            inputElement.attr('Sri-pattern-validation', attributes.SriPatternValidation);        }        if(attributes.SriAccountLineValidation !== undefined){            inputElement.attr('Sri-account-line-validation', attributes.SriAccountLineValidation);        }        if(attributes.SriBicValidation !== undefined){            inputElement.attr('Sri-bic-validation', attributes.SriBicValidation);        }        if(attributes.SriAlphaNumericSpicalchar !== undefined){            inputElement.attr('Sri-alpha-numeric-spicalchar', attributes.SriAlphaNumericSpicalchar);        }        if(attributes.SriSynonymValidation !== undefined){            inputElement.attr('Sri-synonym-validation', attributes.SriSynonymValidation);        }    }    function SriInputTemplateUrl(elem, attrs) {        var defaultUrl = 'app/templates/Sri-input';        if (attrs.type === 'checkbox') {            return defaultUrl + '-checkbox.html';        }        if (attrs.type === 'search') {            return defaultUrl + '-search.html';        }        return defaultUrl + '.html';    }/** * */angular.module('Sri.customTag.module').directive('SriNoPercentileChar', SriNoPercentileChar);function SriNoPercentileChar() {    return {        restrict: 'A',        require: "?ngModel",        link: SriNoPercentileCharLink,    };}function SriNoPercentileCharLink(scope, element, attributes, ngModelCtrl) {    if(ngModelCtrl === undefined || ngModelCtrl === null) {        return;    }    var ngCtrl = ngModelCtrl;    ngModelCtrl.$formatters.push(function(inputValue) {       // console.log('********$formatters');        if(inputValue === null){            ngModelCtrl.$setViewValue(undefined);        }        if(inputValue === undefined || inputValue ===''){            return '';        }        var  cleanInputValue = inputValue.replace(/[%<>+;]/g,'');        return cleanInputValue;    });    ngModelCtrl.$parsers.push(function(inputValue) {       // console.log('********$parsers');        if(inputValue === null){            ngModelCtrl.$setViewValue(undefined);        }        if(inputValue === undefined || inputValue ===''){            return '';        }        var  cleanInputValue = inputValue.replace(/[%<>+;]/g,'');        return cleanInputValue;    });    element.on('blur keyup change', function() {        scope.$apply(function(){            ngModelCtrl.$setViewValue(ngModelCtrl.$modelValue);            ngModelCtrl.$render();           // console.log('********apply');        });    });}/** * */    SriNumberInput.$inject = ["$compile"];angular.module('Sri.customTag.module').directive('SriNumberInput', SriNumberInput);    function SriNumberInput($compile) {        return {            restrict: 'E',            replace: true,            require: ['?^form'],            scope: {                type: "@",                SriModel: "=",                label: '@',                name: "@",                minLength: "@",                maxLength: "@",                trim: "@",                labelClass: "@",                inputClass: "@",            },            templateUrl: 'app/templates/Sri-number-input.html',            link: function(scope, element, attributes, controller) {                var formController = controller[0];                $compile(element)(scope);                if (formController) {                    scope.errorhandler = formController[scope.name];                }                if(scope.inputClass=== undefined) {                    scope.inputClass = "col-md-2";                }                if(scope.labelClass=== undefined) {                    scope.labelClass = "col-md-1";                }                           },        };    }angular.module('Sri.customTag.module').directive('SriNumeric', SriNumeric);function SriNumeric() {    return {        restrict: 'A',        require: "?ngModel",        link: SriNumericLink,    };}function SriNumericLink(scope, element, attributes, ngModelCtrl) {    if(ngModelCtrl === undefined || ngModelCtrl === null) {        return;    }    var pattern=/^[0-9]+$/;    if(attributes.searchPattern ==="true"){        pattern=/^[0-9*]+$/;    }    ngModelCtrl.$validators.numeric = function(modelValue) {        if(modelValue === null){            ngModelCtrl.$setViewValue(undefined);        }        if(modelValue === undefined || modelValue ===''){            return true;        }        var valid = pattern.test(modelValue);        if(!valid){            ngModelCtrl.$setDirty();            return false;        }        return true;    };}/** * */    SriSearchInput.$inject = ["$compile"];angular.module('Sri.customTag.module').directive('SriSearchInput', SriSearchInput);    function SriSearchInput($compile) {        return {            restrict: 'E',            replace: true,            require: ['?^form'],            scope: {                type: "@",                SriModel: "=",                label: '@',                name: "@",                minLength: "@",                maxLength: "@",                searchPattern: "@",                trim: "@",                labelClass: "@",                inputClass: "@",                allowLowerCase: "@",                externalSearch: "&",            },            templateUrl: 'app/templates/Sri-search-input.html',            link: function(scope, element, attributes, controller) {                var formController = controller[0];               appendValidationDirectives(element, attributes);                $compile(element)(scope);                if (formController) {                    scope.errorhandler = formController[scope.name];                }                if(scope.inputClass=== undefined) {                    scope.inputClass = "col-md-2";                }                if(scope.labelClass=== undefined) {                    scope.labelClass = "col-md-1";                }                scope.regexPattern = new RegExp(scope.pattern);                var spanElem = element.find('span');                spanElem.bind("click", function(){                    scope.externalSearch();                });            },        };    }    function appendValidationDirectives(element, attributes) {        var inputElement = element.find('input');        if(attributes.SriAlphaNumeric !== undefined) {            inputElement.attr('Sri-alpha-numeric', '');        }        if(attributes.SriAlphaNumericSpace !== undefined){            inputElement.attr('Sri-alpha-numeric-space', '');        }        if(attributes.SriAlpha !== undefined){            inputElement.attr('Sri-alpha', '');        }        if(attributes.SriNumeric !== undefined){            inputElement.attr('Sri-numeric', '');        }        if(attributes.SriAlphaNumericSpicalchar !== undefined){            inputElement.attr('Sri-alpha-numeric-spicalchar', attributes.SriAlphaNumericSpicalchar);        }           }/** * */SriSelectCtrl.$inject = ["$scope"];angular.module('Sri.customTag.module').directive('SriSelect', SriSelect);function SriSelect () {    return {        restrict: 'E',        require: ['?^form'],        replace: true,        scope: {            SriModel: "=",            label: '@',            name: "@",            SriDisabled: "=",            required: "@",            labelClass: "@",            inputClass: "@",            options: '=',            selected: '=',            optionDisplay: '@',            onChangeValue: '&'        },        templateUrl: 'app/templates/Sri-select.html',        controller: SriSelectCtrl,        link: SriSelectlink,    };}function SriSelectCtrl($scope) {    if($scope.optionDisplay !== undefined) {        $scope.optionEval = "value as " + "value." + $scope.optionDisplay + " for value in options track by value.id";    } else {        $scope.optionEval = "value as value for value in options";    }}function SriSelectlink(scope, element, attributes, formController) {    if (formController) {        scope.errorhandler = formController[scope.name];    }    if(scope.inputClass === undefined) {        scope.inputClass = "col-md-2";    }    if(scope.labelClass === undefined) {        scope.labelClass = "col-md-1";    }    scope.updateValue = function() {        if(scope.onChangeValue) {            scope.onChangeValue();        }    };}/** * */angular.module('Sri.customTag.module').directive('SriTextArea', SriTextArea);function SriTextArea() {    return {        restrict: 'E',        replace: true,        require: ['?^form'],        scope: {            type: "@",            SriModel: "=",            label: '@',            name: "@",            minLength: "@",            maxLength: "@",            pattern: "@",            SriDisabled: "=",            required: "@",            trim: "@",            labelClass: "@",            inputClass: "@",            rows: "@"        },        templateUrl: SriTextAreaTemplateUrl,        link: SriTextAreaLink,    };}function SriTextAreaTemplateUrl(elem, attrs) {    return 'app/templates/Sri-textarea.html';}function SriTextAreaLink(scope, element, attributes, controller) {    var formController = controller[0];    if (formController) {        scope.errorhandler = formController[scope.name];    }    if(scope.inputClass=== undefined) {        scope.inputClass = "col-md-2";    }    if(scope.labelClass=== undefined) {        scope.labelClass = "col-md-1";    }    scope.regexPattern = new RegExp(scope.pattern);}angular.module('Sri.customTag.module').directive('SriUiGrid', SriUiGrid);function SriUiGrid() {    return {        restrict: 'E',        replace: true,        scope: {            paginationOptions: '=',            disablePagination: '@',            gridOptions: '=',            url: '@',            searchFilter: '=',            appId : '=',            multiSelect : '@',            enableCellSelection : '@'        },        templateUrl: SriUiGridUrl,        controller: SriUiGridController,        controllerAs: 'vm',        bindToController: true,    };}function SriUiGridUrl(elem, attrs) {    if(attrs.enableCellSelection === undefined) {        return 'app/templates/Sri-ui-grid.html';    }    return 'app/templates/Sri-ui-multiSelect-grid.html';}SriUiGridController.$inject = ['$scope', '$attrs', '$resource' ,'uiGridConstants', '$localStorage', 'SriApiService'];function SriUiGridController($scope, $attrs, $resource ,uiGridConstants, $localStorage, $SriApiService) {    var vm = this;    vm.resource = $resource;    //vm.localStorage = $localStorage;    vm.apiService = $SriApiService;    if(vm.paginationOptions === undefined) {        vm.paginationInfo = vm.defaultPaginationOptions();    } else {        vm.paginationInfo = vm.paginationOptions;    }    vm.original = angular.copy(vm.gridOptions);    for (var i=0, item; i <  vm.original.columnDefs.length; i++)  {        var temap =vm.gridOptions.columnDefs[i];        temap.sortDirectionCycle=["asc", "desc"];    }    vm.gridValues = vm.defaultGridValues(uiGridConstants);    if(vm.gridOptions.isRowSelectable !== undefined) {        vm.isRowSelectable();    }    vm.gridValues.onRegisterApi =  function(gridApi) {        vm.gridApi = gridApi;        //vm.gridApi.core.on.columnVisibilityChanged(null,  saveState.bind(vm));        vm.gridApi.selection.on.rowSelectionChangedBatch(null, selectAll.bind(vm));        vm.gridApi.selection.on.rowSelectionChanged(null, vm.onRowSelect.bind(vm));        if(vm.enableCellSelection !== undefined) {            vm.gridApi.cellNav.on.navigate(null, vm.onCellSelect.bind(vm));        }        if(vm.multiSelect === undefined || vm.multiSelect === 'false') {            vm.gridApi.core.on.sortChanged(null, vm.saveSortInfo.bind(vm));        }        vm.getData();    };    if(vm.gridOptions.columnDefs) {        vm.gridValues.columnDefs = vm.gridOptions.columnDefs;    }    vm.gridValues.appScopeProvider = vm;    vm.appendExternalFunctions();    vm.gridOptions.refreshGrid = function() {        vm.getData();    }.bind(vm);    vm.gridOptions.refresh = function() {        vm.refresh();    }.bind(vm);    vm.gridOptions.onBack = function() {        vm.onBack();    }.bind(vm);    vm.gridOptions.onNext = function() {        vm.onNext();    }.bind(vm);    //var saveState = function()  {    //    var state;    //    state =  vm.gridApi.saveState.save();    //    $localStorage[vm.appId + 'grid'] = state;    //};    var selectAll = function()  {        vm.gridOptions.selectedRows = vm.gridApi.selection.getSelectedRows();    };}SriUiGridController.prototype.refresh =function() {    this.gridApi.grid.refresh();};SriUiGridController.prototype.appendExternalFunctions = function() {    if(this.gridOptions.externalFunctions === undefined) {        return;    }    for (var key in this.gridOptions.externalFunctions) {        if (this.gridOptions.externalFunctions.hasOwnProperty(key)) {            this[key] = this.gridOptions.externalFunctions[key];        }    }};SriUiGridController.prototype.onCellSelect = function(newRowCol, oldRowCol) {    this.gridOptions.selectedRows = this.gridApi.selection.getSelectedRows();    if(newRowCol.col.colDef.name !== 'selectionRowHeaderCol' && this.multiSelect === 'true') {        this.gridOptions.onRowSelect(newRowCol.row);    }    if(newRowCol.col.colDef.onCellSelect !== undefined) {        newRowCol.col.colDef.onCellSelect(newRowCol.col, newRowCol.row);    }};SriUiGridController.prototype.saveSortInfo = function(grid, sortColumns) {    if(this.gridOptions.onSort !== undefined) {        this.gridOptions.onSort(grid, sortColumns);    } else if (sortColumns.length !== 0) {        //$localStorage[vm.appId + 'sortField'] = sortColumns;        this.gridOptions.sortFields = sortColumns[0].field;        this.gridOptions.sortDirections = sortColumns[0].sort.direction;    }    this.getData();};SriUiGridController.prototype.onRowSelect = function(row) {    if(this.multiSelect === undefined || this.multiSelect === 'false') {        this.gridOptions.onRowSelect(row);    }    this.gridOptions.selectedRows = this.gridApi.selection.getSelectedRows();};SriUiGridController.prototype.isRowSelectable = function() {    this.gridValues.isRowSelectable = this.gridOptions.isRowSelectable;};//SriUiGridController.prototype.restoreGrid = function() {//    var appGrid = this.appId + 'grid';//    if(this.localStorage[appGrid]) {//        this.gridApi.saveState.restore(null,  this.localStorage[appGrid]);//    }//};SriUiGridController.prototype.defaultGridValues = function(uiGridConstants) {    var singleRowSelect = this.multiSelect === undefined || this.multiSelect === 'false';    var scrollBars = singleRowSelect ? uiGridConstants.scrollbars.NEVER : uiGridConstants.scrollbars.ALWAYS;    return {        // flatEntityAccess: true,        enableHorizontalScrollbar : uiGridConstants.scrollbars.NEVER,        enableVerticalScrollbar: uiGridConstants.scrollbars.NEVER,        useExternalSorting: true,        enableGridMenu: true,        enableColumnResizing: true,        enableColumnReordering: true,        enableRowSelection: true,        enableRowHeaderSelection: singleRowSelect === false,        multiSelect: singleRowSelect === false,        selectedItems: [],    };};SriUiGridController.prototype.defaultPaginationOptions = function() {    return {        currentPage: 1,        pageSize: 20,        maxSize: 5,        totalResults: null    };};SriUiGridController.prototype.serviceArgs = function() {    return {        pageSize: this.paginationInfo.pageSize,        pageId: this.paginationInfo.currentPage,        sortBy: this.gridOptions.sortFields,        sortOrder: this.gridOptions.sortDirections,        filter: this.searchFilterFormat()    };};SriUiGridController.prototype.onBack =function() {    var indexOf = this.gridValues.data.indexOf(this.gridOptions.selectedRows[0]);    if(indexOf === 0 && this.paginationInfo.currentPage !== 1){        this.paginationInfo.currentPage = this.paginationInfo.currentPage - 1;        var args = this.serviceArgs();        var that = this;        this.getResource().then(function(data) {            that.updateGridData(data);            indexOf = that.paginationInfo.pageSize;            that.gridApi.grid.modifyRows(that.gridValues.data);            that.gridApi.selection.selectRow(that.gridValues.data[indexOf-1]);        });        return;    }    this.gridApi.selection.selectRow(this.gridValues.data[indexOf-1]);};SriUiGridController.prototype.onNext =function() {    var indexOf = this.gridValues.data.indexOf(this.gridOptions.selectedRows[0]);    if(indexOf >= (this.paginationInfo.pageSize-1)){        this.paginationInfo.currentPage = this.paginationInfo.currentPage + 1;        var args = this.serviceArgs();        var that = this;        this.getResource().then(function(data) {            that.updateGridData(data);            indexOf = -1;            that.gridApi.grid.modifyRows(that.gridValues.data);            that.gridApi.selection.selectRow(that.gridValues.data[indexOf+1]);        });        return;    }    this.gridApi.selection.selectRow(this.gridValues.data[indexOf+1]);};SriUiGridController.prototype.getData =function() {    var args = this.serviceArgs();    var that = this;    this.getResource().then(function (data) {        that.gridValues.data = data.entity ? data.entity : [];        that.gridOptions.data = data.entity ? data.entity : [];        that.paginationInfo.totalResults = data.count;        //that.restoreGrid();    });};SriUiGridController.prototype.updateGridData =function(list) {    this.gridValues.data = list.data.entity;    this.paginationInfo.totalResults = list.data.count;    //this.restoreGrid();};SriUiGridController.prototype.getResource =function() {    var args = this.serviceArgs();    return this.apiService.invoke({        url: this.url,        params: args    });};SriUiGridController.prototype.searchFilterFormat=function() {    this.createSearchString = function(filter, fieldName, fieldValue ) {        if(fieldValue !== "" && fieldValue !== undefined) {            filter = filter + fieldName + "::" + fieldValue;            filter = filter + "|";        }        return filter;    };    this.formattedSearchFilter = function() {        if(this.searchFilter === undefined) {            return;        }        var filter = "";        var that = this;        Object.keys(this.searchFilter).forEach(function(key) {            filter = that.createSearchString(filter, key, that.searchFilter[key]);        });        return  filter;    };    return this.formattedSearchFilter();};angular.module('Sri.customTag.module').directive('SriUpperCase', SriUpperCase);function SriUpperCase() {        return {            require: 'ngModel',            restrict: 'A',            link: uppercased,        };}function uppercased(scope, element, attrs, modelCtrl) {    if(scope.allowLowerCase === undefined) {        modelCtrl.$parsers.push(function(input) {            return input ? input.toUpperCase() : "";        });        element.css("text-transform","uppercase");    }}angular.module('Sri.customTag.module').directive('validationError', validationError);    function validationError () {      return {        restrict: 'E',        replace: 'true',        require: '^?form',        scope:{            customErrors: "="        },        templateUrl: 'app/templates/Sri-errorMessage.html',        link: validationErrorLink,      };    }    function validationErrorLink(scope, element, attributes, formController) {        if(formController) {            scope.errorhandler = formController[attributes.forname];        }        scope.minlength = attributes.minlength;        scope.maxlength = attributes.maxlength;    }/** * */SriAlertService.$inject = ["$q", "$uibModal"];angular.module('Sri.customTag.module').service('SriAlertService', SriAlertService);function SriAlertService($q, $uibModal) {    this.getAlert = function(alertParams) {        this.deferred = $q.defer();        this.modalOpen('sm', alertParams);        return this.deferred.promise;    };    this.modalOpen = function (size, alertParams) {        var that = this;        var modalInstance = $uibModal.open({            animation: true,            backdrop: false,            keyboard: false,            templateUrl: 'app/templates/Sri-alert.html',            controller: 'SriAlertCtrl as SriAlertCtrl',            size: size,            resolve: {                alertParams: function() {                    if(alertParams === undefined) {                        return {};                    }                    return alertParams;                }            }        }).result.then(function (status) {                if (status === 'SUCCESS') {                    that.deferred.resolve();                } else {                    that.deferred.reject();                }            });    };}/** * */SriCommentService.$inject = ["$q", "$uibModal"];angular.module('Sri.customTag.module').service('SriCommentService', SriCommentService);function SriCommentService($q, $uibModal) {    this.getComments = function(exclude) {        this.deferred = $q.defer();        this.modalOpen('sm', exclude);        return this.deferred.promise;    };    this.modalOpen = function (size, exclude) {        var that = this;        var modalInstance = $uibModal.open({            animation: true,            backdrop: false,            keyboard: false,            templateUrl: 'app/templates/Sri-comment-date.html',            controller: 'SriCommentCtrl as SriCommentCtrl',            size: size,            resolve: {                exclude: function() {                    if(exclude === undefined) {                        return {};                    }                    return exclude;                }            }        }).result.then(function (comments) {                if (comments !== undefined) {                    that.deferred.resolve(comments);                } else {                    that.deferred.reject('No Comments');                }            });    };}HistoryModalPanelService.$inject = ["$uibModal"];angular.module('Sri.customTag.module').service('historyModalPanelService', HistoryModalPanelService);function HistoryModalPanelService($uibModal) {    this.openHistoryModal = function (id) {        this.modalOpen('tr-lg', id);    };    this.modalOpen = function (size, id,profile, account,ledger) {        var modalParams = {            size:size,            id: id,            account:account,            ledger:ledger,            profile:profile        };        var modalInstance = $uibModal.open({            animation: true,            backdrop: false,            templateUrl: 'app/templates/history-panel.html',            controller: 'histPanelCtrl as histPanelCtrl',            size: size,            resolve: {                modalParams: function() {                    return modalParams;                },            }        });    };}/** * */SriLoadModules.$inject = ["CONFIG_PARAMS", "$injector"];angular.module('Sri.customTag.module').service('SriLoadModules', SriLoadModules);function SriLoadModules(CONFIG_PARAMS, $injector) {    this.loadModule = function(moduleName) {        var module  = angular.module(moduleName);        var queue = angular.module(moduleName)._invokeQueue;        var runBlocks = angular.module(moduleName)._runBlocks;        for(var i=0;i<queue.length;i++) {            var call = queue[i];            var provider = CONFIG_PARAMS.CONTROLLER_PROVIDER[call[0]];            if(provider) {                provider[call[1]].apply(provider, call[2]);            }        }        angular.forEach(runBlocks, function(fn) {            $injector.invoke(fn);        });    };}SriReviewPanelService.$inject = ["$uibModal"];angular.module('Sri.customTag.module').service('SriReviewPanelService', SriReviewPanelService);function SriReviewPanelService($uibModal) {    this.getReviewChanges=function(changeData,gridService,alertFactory) {      //  this.deferred = $q.defer();        this.modalOpen('lg', changeData,gridService,alertFactory);        //return this.deferred.promise;    };      this.modalOpen = function (size, changeData,gridService,alertFactory) {        var modalParams = {            size: size,            changeData:  changeData,            gridService: gridService,            alertFactory:alertFactory        };        var modalInstance = $uibModal.open({            animation: true,            backdrop: false,            templateUrl: 'app/templates/reviewModalView.html',            controller: 'SriReviewCtrl as SriReviewCtrl',            size: size,            resolve: {                modalParams: function() {                    return modalParams;                },            }        });    };}/** * */SriSearchService.$inject = ["$q", "$uibModal", "$injector", "SriLoadModules"];angular.module('Sri.customTag.module').service('SriSearchService', SriSearchService);function SriSearchService($q, $uibModal, $injector, SriLoadModules) {    this.callBackOnSelect = {};    this.searchParamService = undefined;    this.search = function(moduleName, includeUrl, searchFilter) {        this.deferred = $q.defer();        SriLoadModules.loadModule(moduleName);        this.modalOpen('lg', includeUrl, moduleName, searchFilter);        return this.deferred.promise;    };    this.modalOpen = function (size, includeUrl, moduleName, searchFilter) {        var that = this;        var searchParamService = this.populateSearchParamService(moduleName, searchFilter);        this.modalInstance = $uibModal.open({            animation: true,            backdrop: false,            keyboard: false,            templateUrl: "app/templates/Sri-search-panel.html",            controller: "SriSearchPanelCtrl",            controllerAs: "SriSearchPanelCtrl",            size: size,            resolve: {                url: function() {                    return includeUrl;                },                callBackOnSelect: function() {                    return that.callBackOnSelect;                }            }        }).result.then(function (selectedRow) {            if (selectedRow !== undefined) {                that.deferred.resolve(selectedRow);            } else {                that.deferred.reject('No Comments');            }        });    };    this.populateSearchParamService = function(moduleName, searchFilter) {        this.searchParamService = $injector.get(searchFilter.name);        var searchVal = searchFilter.searchFilter;        for(var property in searchVal){           this.searchParamService.internalSearchParams[property] = searchVal[property];        }        this.searchParamService.externalSearch = true;    };    this.onRowSelect = function(selectRow) {        this.callBackOnSelect.onRowSelect(selectRow, this.searchParamService);    }.bind(this);}angular.module('sri.customTag.module',['ui.grid', 'ui.bootstrap.dateparser', 'ui.bootstrap.datepicker', 'ui.bootstrap.timepicker', 'ui.grid.autoResize', 'ui.grid.saveState',    'ui.grid.resizeColumns', 'ui.grid.moveColumns' , 'ui.grid.grouping' , 'ui.grid.selection', 'ui.grid.cellNav']);angular.module('Sri.customTag.module').config(['$controllerProvider', '$compileProvider', '$provide', 'CONFIG_PARAMS', function($controllerProvider, $compileProvider, $provide, CONFIG_PARAMS) {    var providers = {        $controllerProvider: $controllerProvider,        $compileProvider: $compileProvider,        $provide: $provide    };    CONFIG_PARAMS.CONTROLLER_PROVIDER = providers;}]);/** * */SriAlertCtrl.$inject = ["$modalInstance", "alertParams"];angular.module('Sri.customTag.module').controller('SriAlertCtrl', SriAlertCtrl);function SriAlertCtrl($modalInstance, alertParams) {    this.alertText = alertParams.alertText;    this.okButtonText = alertParams.okButtonText;    this.cancelButtonText = alertParams.cancelButtonText;    this.alertParams = alertParams;    if(alertParams.okButtonText === undefined) {        this.okButtonText = 'OK';    }    if(alertParams.cancelButtonText === undefined) {        this.cancelButtonText = 'Cancel';    }    this.okButtonAction = function () {        if(alertParams.okButtonAction !== undefined) {            alertParams.okButtonAction();        }        $modalInstance.close('SUCCESS');    };    this.cancelButtonAction = function () {        if(alertParams.cancelButtonAction !== undefined) {            alertParams.cancelButtonAction();        }        $modalInstance.dismiss('CANCEL');    };}/** * */SriCommentCtrl.$inject = ["$modalInstance", "exclude"];angular.module('Sri.customTag.module').controller('SriCommentCtrl', SriCommentCtrl);function SriCommentCtrl($modalInstance, exclude) {    this.today = new Date();    this.commentsData = {};    this.enbaleDatePicker = false;    this.excludeComment = exclude.excludeComment === undefined ? false : exclude.excludeComment;    this.excludeDateTime = exclude.excludeDateTime === undefined ? false : exclude.excludeDateTime;    this.init = function() {        if(this.excludeDateTime === false) {            this.effectiveDate = new Date();        }        if(exclude.effectiveDate !== undefined) {            this.effectiveDate = exclude.effectiveDate;            this.enbaleDatePicker = true;        }    };    this.init();    this.submitComments = function () {        $modalInstance.close(this.commentsData);    };    this.close = function () {        $modalInstance.dismiss('cancel');    };}HistPanelCtrl.$inject = ["$scope", "$uibModalInstance", "modalParams", "SriApiService", "uiGridConstants", "$q"];angular.module('Sri.customTag.module').controller('histPanelCtrl', HistPanelCtrl);function HistPanelCtrl($scope, $uibModalInstance, modalParams,SriApiService,uiGridConstants, $q) {    this.changeData=[];    this.id=modalParams.id;    this.changeUUID=modalParams.id;    this.account = modalParams.account;    this.ledger = modalParams.ledger;    this.profile = modalParams.profile;    this.customerHeader = '';    var vm=this;    this.init = function() {        this.showChanges=false;        this.loadAll();    };    this.gridOptions = {        columnDefs: [            { field: 'modifiedBy', displayName: 'User'},            { field: 'comments', displayName: 'Comment'},            {                field: 'modifiedDate',                displayName: 'Date',                cellFilter: 'date:"yyyy-MM-dd HH:mm:ss"'            }        ],        onRegisterApi: function (gridApi) {            this.gridApi = gridApi;            //  gridApi.selection.on.rowSelectionChanged($scope,onRowSelect.bind(row));            gridApi.selection.on.rowSelectionChanged(null, vm.onRowSelect.bind(vm));            // gridApi.cellNav.on.navigate(null, vm.onCellSelect.bind(vm));        },        enableHorizontalScrollbar : uiGridConstants.scrollbars.NEVER,        enableColumnResizing: true,        enableColumnReordering: true,        enableRowSelection: true,        enableRowHeaderSelection: false,        multiSelect:false,    };    this.historyGrid = {        columnDefs: [            {name: 'state', displayName: "State"},            {name: 'modifiedBy', displayName: "User"},            {name: 'comments', displayName: "Comment"},            {name: "modifiedDate", displayName: "modifiedDate", cellFilter: 'date:"yyyy-MM-dd HH:mm:ss"'}        ],        enableCellEditOnFocus: false,        enableHorizontalScrollbar: uiGridConstants.scrollbars.NEVER,    };    vm.gridOptions.appScopeProvider = vm;    this.onRowSelect = function(selectedRow) {        this.changeUUID=selectedRow.entity.changeUUID;        this.load();    }.bind(this);    this.load = function() {        this.changeData=[];        function historyPromise(entityUUID, changeUUID) {            var filter = "entityUUID::" + entityUUID + "|";            filter = filter + "changeUUID::" + changeUUID + "|";            var params = angular.merge({}, {filter: filter, all: "all"}, {                sortBy: "modifiedDate",                sortOrder: "DESC"            });            var jsonObject = {                "url":  '/Sri-web/history/',                "params": params            };            return SriApiService.invoke(jsonObject);        }        function historyChangePromise(changeUUID) {            var params = {                url: '/Sri-web/history/historyChangeId/:Id',                params: {Id: changeUUID}            };            return SriApiService.invoke(params);        }        var _this = this;        $q.all([historyPromise(_this.id, _this.changeUUID), historyChangePromise(_this.changeUUID)]).then(function (result) {            _this.changeData.push(JSON.parse(result[1].entity));            _this.historyGrid.data=result[0].entity;            _this.showChanges=true;        });    };    this.loadAll = function() {        var _this = this;        _this.customerHeader='';        console.log("account number="+_this.account);        console.log("ledger="+_this.ledger);        var  filter= 'filter=entityUUID::' +this.id + "|";        filter = filter + "state::" + 'LIVE' + "|";        if(_this.account !== undefined && _this.ledger !== undefined){            console.log('accountNo =',_this.account);            filter = filter + "profile::CUSTOMER|";            filter = filter + "accountNo::" + _this.account + "|";            filter = filter + "ledger::" + _this.ledger + "|";            _this.customerHeader =' : '+_this.ledger +' - '+_this.account;        }        console.log('filter*** =',filter);        var request = {            url: '/Sri-web/history/?:filter',            method: "GET",            params: {                id: _this.uuid,                filter:filter            }        };        //        //var request =  {        //    url: HISTORY_CONSTANTS.getAll.url,        //    method: HISTORY_CONSTANTS.getAll.method,        //    params: {        //        id: _this.uuid        //    }        //};        SriApiService.invoke(request,filter).then(function (response) {            _this.populateInitValues(response);        });    };    this.populateInitValues = function(response) {        this.historyOfInterest = response.entity;        this.original = angular.copy(response.entity);        this.gridOptions.data=response.entity;    };    this.close = function () {        $uibModalInstance.close();    };    this.init();}CurrencyReviewCtrl.$inject = ["$scope", "$uibModalInstance", "modalParams", "$q"];angular.module('Sri.customTag.module').controller('SriReviewCtrl', CurrencyReviewCtrl);function CurrencyReviewCtrl($scope, $uibModalInstance, modalParams,  $q) {    this.changeData=[];    this.gridService =modalParams.gridService;    this.alertFactory = modalParams.alertFactory;    this.init = function() {       // this.changeData = modalParams.changeData;    };    angular.forEach(modalParams.changeData, function (value) {        this.changeData.push(JSON.parse(value));    }.bind(this));    this.close = function () {        $uibModalInstance.close();               if(this.gridService !== undefined && this.gridService!==null){            this.gridService.refreshGrid();        }  if(this.alertFactory !== undefined && this.alertFactory!==null){            this.alertFactory.addSuccessAlert('Transaction has been submitted successfully');        }    };    this.init();}SriSearchPanelCtrl.$inject = ["$modalInstance", "url", "callBackOnSelect"];angular.module('Sri.customTag.module').controller('SriSearchPanelCtrl', SriSearchPanelCtrl);function SriSearchPanelCtrl($modalInstance, url, callBackOnSelect) {    callBackOnSelect.onRowSelect = function(selectedRow, searchParams) {        var returnValue = {entity : selectedRow.entity, searchValues : searchParams};        this.closeButtonAction(returnValue);    }.bind(this);    this.includeURL = function() {        return url;    };    this.closeButtonAction = function (selectedRow) {        $modalInstance.close(selectedRow);    };    this.cancelButtonAction = function () {        $modalInstance.dismiss('CANCEL');    };}/** * Created by U445701 on 3/6/2016. */angular.module('Sri.customTag.module').controller('SriTestCtrl', SriTestCtrl);function SriTestCtrl() {   // this.mytest1 = "[{\"infoList\":[{\"text\":\"Currency Modified\",\"fontStyle\":\"text-medium-b\"}],\"tables\":[{\"tableInfoList\":[],\"tableRowList\":[{\"rowCells\":[{\"text\":\"\",\"fontStyle\":\"text-medium-b-bg\",\"cellSpan\":\"\"},{\"text\":\"From\",\"fontStyle\":\"text-medium\",\"cellSpan\":\"\"},{\"text\":\"To\",\"fontStyle\":\"text-medium-b-h\",\"cellSpan\":\"\"}]},{\"rowCells\":[{\"text\":\"Currency Code\",\"fontStyle\":\"text-medium-b-bg\",\"cellSpan\":\"\"},{\"text\":\"NZD\",\"fontStyle\":\"text-medium\",\"cellSpan\":\"\"},{\"text\":\"NZD\",\"fontStyle\":\"text-medium\",\"cellSpan\":\"\"}]},{\"rowCells\":[{\"text\":\"Currency Name\",\"fontStyle\":\"text-medium-b-bg\",\"cellSpan\":\"\"},{\"text\":\"NEW ZEALAND DOLLAR\",\"fontStyle\":\"text-medium\",\"cellSpan\":\"\"},{\"text\":\"NEW ZEALAND DOLLAR\",\"fontStyle\":\"text-medium\",\"cellSpan\":\"\"}]},{\"rowCells\":[{\"text\":\"Active\",\"fontStyle\":\"text-medium-b-bg\",\"cellSpan\":\"\"},{\"text\":\"X\",\"fontStyle\":\"text-medium\",\"cellSpan\":\"\"},{\"text\":\"X\",\"fontStyle\":\"text-medium\",\"cellSpan\":\"\"}]},{\"rowCells\":[{\"text\":\"Base Currency\",\"fontStyle\":\"text-medium-b-bg\",\"cellSpan\":\"\"},{\"text\":\" \",\"fontStyle\":\"text-medium\",\"cellSpan\":\"\"},{\"text\":\" \",\"fontStyle\":\"text-medium\",\"cellSpan\":\"\"}]},{\"rowCells\":[{\"text\":\"Min Pay Limit\",\"fontStyle\":\"text-medium-b-bg\",\"cellSpan\":\"\"},{\"text\":\"50\",\"fontStyle\":\"text-medium\",\"cellSpan\":\"\"},{\"text\":\"500\",\"fontStyle\":\"text-medium-b-h\",\"cellSpan\":\"\"}]},{\"rowCells\":[{\"text\":\"Max Pay Limit\",\"fontStyle\":\"text-medium-b-bg\",\"cellSpan\":\"\"},{\"text\":\"15000\",\"fontStyle\":\"text-medium\",\"cellSpan\":\"\"},{\"text\":\"15000\",\"fontStyle\":\"text-medium\",\"cellSpan\":\"\"}]},{\"rowCells\":[{\"text\":\"Split Advice Eligible\",\"fontStyle\":\"text-medium-b-bg\",\"cellSpan\":\"\"},{\"text\":\"X\",\"fontStyle\":\"text-medium\",\"cellSpan\":\"\"},{\"text\":\"X\",\"fontStyle\":\"text-medium\",\"cellSpan\":\"\"}]},{\"rowCells\":[{\"text\":\"Non Decimal Currency\",\"fontStyle\":\"text-medium-b-bg\",\"cellSpan\":\"\"},{\"text\":\" \",\"fontStyle\":\"text-medium\",\"cellSpan\":\"\"},{\"text\":\" \",\"fontStyle\":\"text-medium\",\"cellSpan\":\"\"}]}]}]}]";    //this.mytest2={"infoList":[{"text":"Currency Modified","fontStyle":"text-medium-b"}],"tables":[{"tableInfoList":[],"tableRowList":[{"rowCells":[{"text":"","fontStyle":"text-medium-b-bg","cellSpan":""},{"text":"From","fontStyle":"text-medium","cellSpan":""},{"text":"To","fontStyle":"text-medium-b-h","cellSpan":""}]},{"rowCells":[{"text":"Currency Code","fontStyle":"text-medium-b-bg","cellSpan":""},{"text":"NOK","fontStyle":"text-medium","cellSpan":""},{"text":"NOK","fontStyle":"text-medium","cellSpan":""}]},{"rowCells":[{"text":"Currency Name","fontStyle":"text-medium-b-bg","cellSpan":""},{"text":"NORWEIGAN KRONER","fontStyle":"text-medium","cellSpan":""},{"text":"NORWEIGAN KRONERKK","fontStyle":"text-medium-b-h","cellSpan":""}]},{"rowCells":[{"text":"Active","fontStyle":"text-medium-b-bg","cellSpan":""},{"text":"X","fontStyle":"text-medium","cellSpan":""},{"text":"X","fontStyle":"text-medium","cellSpan":""}]},{"rowCells":[{"text":"Base Currency","fontStyle":"text-medium-b-bg","cellSpan":""},{"text":" ","fontStyle":"text-medium","cellSpan":""},{"text":" ","fontStyle":"text-medium","cellSpan":""}]},{"rowCells":[{"text":"Min Pay Limit","fontStyle":"text-medium-b-bg","cellSpan":""},{"text":"50","fontStyle":"text-medium","cellSpan":""},{"text":"51","fontStyle":"text-medium-b-h","cellSpan":""}]},{"rowCells":[{"text":"Max Pay Limit","fontStyle":"text-medium-b-bg","cellSpan":""},{"text":"15000","fontStyle":"text-medium","cellSpan":""},{"text":"15000","fontStyle":"text-medium","cellSpan":""}]},{"rowCells":[{"text":"Split Advice Eligible","fontStyle":"text-medium-b-bg","cellSpan":""},{"text":"X","fontStyle":"text-medium","cellSpan":""},{"text":"X","fontStyle":"text-medium","cellSpan":""}]},{"rowCells":[{"text":"Non Decimal Currency","fontStyle":"text-medium-b-bg","cellSpan":""},{"text":" ","fontStyle":"text-medium","cellSpan":""},{"text":" ","fontStyle":"text-medium","cellSpan":""}]}]}]}";    this.mytest2='hjjjj';    this.mySearch = function () {        console.lg('mysearch');    };}angular.module('Sri.customTag.module').constant('CONFIG_PARAMS', {    CONTROLLER_PROVIDER: undefined});angular.module("Sri.customTag.module").run(["$templateCache", function($templateCache) {$templateCache.put("app/templates/history-panel.html","<div><Sri-spinner></Sri-spinner><div class=modal-header><h3 class=modal-title>History {{ histPanelCtrl.customerHeader }}</h3></div><div class=modal-body><Sri-fieldset label-name=Modifications><div id=grid1 style=\"height: 200px;\" ui-grid=histPanelCtrl.gridOptions ui-grid-selection></div></Sri-fieldset><div ng-if=histPanelCtrl.showChanges><Sri-fieldset label-name=Changes><Sri-history-details data=histPanelCtrl.changeData></Sri-history-details></Sri-fieldset></div><div ng-if=histPanelCtrl.showChanges><Sri-fieldset label-name=History><div style=\"height: 200px;\" ui-grid=histPanelCtrl.historyGrid class=grid></div></Sri-fieldset></div></div><div class=modal-footer><button class=\"btn btn-primary\" type=button ng-click=histPanelCtrl.close()>Close</button></div></div>");$templateCache.put("app/templates/Sri-alert.html","<div><div class=modal-body><div class=form-horizontal style=\"min-width: 500px\">{{SriAlertCtrl.alertText}}</div></div><div class=modal-footer><button type=submit class=\"btn btn-primary\" ng-click=SriAlertCtrl.okButtonAction() ng-if=\"SriAlertCtrl.alertParams.okButtonAction !== undefined\">{{SriAlertCtrl.okButtonText}}</button> <button type=submit class=\"btn btn-primary\" ng-click=SriAlertCtrl.cancelButtonAction() ng-if=\"SriAlertCtrl.alertParams.cancelButtonAction !== undefined\">{{SriAlertCtrl.cancelButtonText}}</button></div></div>");$templateCache.put("app/templates/Sri-business-errors.html","<div class=\"has-error pull-left div-scroll\"><ul ng-if=\"SriBusinessErrors.length > 0\"><li ng-repeat=\"error in SriBusinessErrors\"><p class=help-block style=\"text-align: left\">{{error}}</p></li></ul></div>");$templateCache.put("app/templates/Sri-comment-date.html","<div><div class=modal-body><form name=form class=form-horizontal role=form novalidate style=\"min-width: 600px\"><Sri-text-area label=Comments name=comment type=text required=true max-length=128 Sri-model=SriCommentCtrl.commentsData.comments label-class=\"col-md-2 control-label text-left\" input-class=\"col-md-10 text-left\" rows=4 ng-if=\"SriCommentCtrl.excludeComment === false\"></Sri-text-area><div class=form-group ng-if=\"SriCommentCtrl.excludeDateTime === false\"><a ng-click=\"SriCommentCtrl.enbaleDatePicker = true\" ng-show=!SriCommentCtrl.enbaleDatePicker>Future Effective Date</a><Sri-date-time-picker name=\"Effective Date\" min-date=SriCommentCtrl.today Sri-date-model=SriCommentCtrl.commentsData.effectiveDate ng-show=SriCommentCtrl.enbaleDatePicker></Sri-date-time-picker></div></form></div><div class=modal-footer><button type=submit class=\"btn btn-primary\" ng-click=SriCommentCtrl.submitComments() ng-disabled=form.$invalid>Submit</button> <button type=submit class=\"btn btn-primary\" ng-click=SriCommentCtrl.close()>Close</button></div></div>");$templateCache.put("app/templates/Sri-datetimepicker.html","<div><table><tbody><tr><td class=col-md-2><label>{{name}}</label></td><td><div class=input-group><input type=text class=form-control readonly uib-datepicker-popup ng-model=SriDateModel min-date=minDate datepicker-options=datePickerOptions ng-required={{required}} close-text=Close is-open=openDatePicker show-weeks=false> <span class=input-group-btn><button type=button class=\"btn btn-default\" ng-click=\"openDatePicker=true\"><i class=\"fa fa-calendar\"></i></button></span></div></td><td>&nbsp;</td><td><uib-timepicker ng-model=SriDateModel hour-step=1 minute-step=0 show-meridian=true readonly-input=true arrow-keys=false></uib-timepicker></td></tr></tbody></table></div>");$templateCache.put("app/templates/Sri-errorMessage.html","<div class=help-block ng-messages=errorhandler.$error ng-show=\"errorhandler.$dirty && errorhandler.$touched && errorhandler.$invalid\"><p ng-message=required>Required field</p><p ng-message=minlength>Minimum length of this field is {{minlength}}</p><p ng-message=maxlength>Maximum length of this field is {{maxlength}}</p><p ng-message=alphaNumeric>This Field accepts Alpha Numeric Only</p><p ng-message=alphaNumericSpace>This Field accepts Alpha Numeric with Spaces Only</p><p ng-message=alpha>This Field accepts Alphabet Only</p><p ng-message=numeric>This Field accepts Numbers Only</p><p ng-message=alphaNumericSpicalchar>This Field accepts Alpha Numeric with Special characters Only\"</p><p ng-message=pattern>Invalid format.</p><div scope=col ng-repeat=\"error in customErrors track by $index\"><p>{{error}}</p></div></div>");$templateCache.put("app/templates/Sri-fieldset.html","<fieldset class={{fieldsetBorder}}><legend class=\"scheduler-border {{labelStyle}}\">{{labelName}}</legend><div ng-class=\"{ \'fieldset-scroll\': scrollBarEnable}\"><ng-transclude></ng-transclude></div></fieldset>");$templateCache.put("app/templates/Sri-history-details.html","<div ng-repeat=\"dataList in data\"><div ng-repeat=\"info in dataList.infoList\"><div class={{info.fontStyle}}>{{info.text}}</div><br></div><div ng-repeat=\"table in dataList.tables\"><div ng-repeat=\"info in table.tableInfoList\"><div class={{info.fontStyle}}>{{info.text}}</div><br></div><table border=1 ng-hide=\"table.tableRowList.length ==0\"><tr ng-repeat=\"row in table.tableRowList\"><td style=\"padding: 5px; text-align: center\" ng-repeat=\"cell in row.rowCells\" class={{cell.fontStyle}} colspan={{cell.cellSpan}}>{{cell.text}}</td></tr></table><br></div></div>");$templateCache.put("app/templates/Sri-history-info.html","<div><a href=#><img src=/Sri-web-domain/scripts/node_modules/Sri-ui/node_modules/Sri-ui-systemscan/images/details.gif uib-tooltip=history ng-click=onHistorySelect()></a></div>");$templateCache.put("app/templates/Sri-input-checkbox.html","<div ng-class=\"{\'required\' : required}\"><label ng-class=labelClass ng-if=\"label !== undefined\">{{label}}</label><div class={{inputClass}}><input type=checkbox name={{name}} ng-model=SriModel ng-disabled=SriDisabled ng-required={{required}}></div></div>");$templateCache.put("app/templates/Sri-input-search.html","<div ng-class=\"{\'required\' : required}\"><label ng-class=labelClass ng-if=\"label !== undefined\">{{label}}</label><div class={{inputClass}} ng-class=\"{\'has-error\': errorhandler.$dirty && errorhandler.$touched && errorhandler.$invalid, \'has-success\' : errorhandler.$dirty && errorhandler.$touched && errorhandler.$valid}\"><div class=input-group><input class=form-control type={{type}} name={{name}} pattern={{pattern}} ng-minlength={{minLength}} ng-maxlength={{maxLength}} maxlength={{maxLength}} ng-model=SriModel ng-disabled=SriDisabled ng-required={{required}} Sri-upper-case aria-describedby=search> <span class=input-group-addon type=submit><i class=\"glyphicon glyphicon-search\"></i></span></div><validation-error forname={{name}} minlength={{minLength}} maxlength={{maxLength}}></validation-error></div></div>");$templateCache.put("app/templates/Sri-input.html","<div ng-class=\"{\'required\' : required}\"><label ng-class=labelClass ng-if=\"label !== undefined\">{{label}}</label><div class={{inputClass}} ng-class=\"{\'has-error\': errorhandler.$dirty && errorhandler.$touched && errorhandler.$invalid, \'has-success\' : errorhandler.$dirty && errorhandler.$touched && errorhandler.$valid}\"><input class=form-control type={{type}} name={{name}} pattern={{pattern}} ng-minlength={{minLength}} ng-maxlength={{maxLength}} maxlength={{maxLength}} ng-model=SriModel ng-disabled=SriDisabled ng-required={{required}} Sri-filter Sri-custom-error-display><validation-error forname={{name}} minlength={{minLength}} maxlength={{maxLength}} custom-errors=customErrors></validation-error></div></div>");$templateCache.put("app/templates/Sri-number-input.html","<div ng-class=\"{\'required\' : required}\"><label ng-class=labelClass ng-if=\"label !== undefined\">{{label}}</label><div class={{inputClass}} ng-class=\"{\'has-error\': errorhandler.$dirty && errorhandler.$touched && errorhandler.$invalid, \'has-success\' : errorhandler.$dirty && errorhandler.$touched && errorhandler.$valid}\"><input class=form-control type={{type}} name={{name}} ng-minlength={{minLength}} ng-maxlength={{maxLength}} maxlength={{maxLength}} ng-model=SriModel></div></div>");$templateCache.put("app/templates/Sri-search-input.html","<div ng-class=\"{\'required\' : required}\"><label ng-class=labelClass ng-if=\"label !== undefined\">{{label}}</label><div class={{inputClass}} ng-class=\"{\'has-error\': errorhandler.$dirty && errorhandler.$touched && errorhandler.$invalid, \'has-success\' : errorhandler.$dirty && errorhandler.$touched && errorhandler.$valid}\"><input class=form-control type={{type}} name={{name}} search-pattern=true ng-minlength={{minLength}} ng-maxlength={{maxLength}} maxlength={{maxLength}} ng-model=SriModel Sri-filter><validation-error forname={{name}} minlength={{minLength}} maxlength={{maxLength}} custom-errors=customErrors></validation-error></div></div>");$templateCache.put("app/templates/Sri-search-panel.html","<div><div class=modal-body><ng-include src=SriSearchPanelCtrl.includeURL()></ng-include></div><div class=modal-footer><button type=submit class=\"btn btn-primary\" ng-click=SriSearchPanelCtrl.cancelButtonAction()>Close</button></div></div>");$templateCache.put("app/templates/Sri-select.html","<div ng-class=\"{\'required\' : required}\"><label ng-class=labelClass ng-if=\"label !== undefined\">{{label}}</label><div class={{inputClass}} ng-class=\"{\'has-error\': errorhandler.$dirty && errorhandler.$touched && errorhandler.$invalid, \'has-success\' : errorhandler.$dirty && errorhandler.$valid}\"><select class=form-control name={{name}} ng-selected=selected ng-disabled=SriDisabled ng-click=updateValue() ng-options={{optionEval}} ng-model=SriModel ng-required={{required}}><option>- Please Select -</option></select></div></div>");$templateCache.put("app/templates/Sri-textarea.html","<div ng-class=\"{\'required\' : required}\" class=form-group><label ng-class=labelClass>{{label}}</label><div class={{inputClass}} ng-class=\"{\'has-error\': errorhandler.$dirty && errorhandler.$touched && errorhandler.$invalid, \'has-success\' : errorhandler.$dirty && errorhandler.$valid}\"><textarea class=form-control type={{type}} name={{name}} pattern={{pattern}} ng-minlength={{minLength}} ng-maxlength={{maxLength}} ng-model=SriModel ng-disabled=SriDisabled ng-required={{required}} rows={{rows}}></textarea><validation-error forname={{name}} minlength={{minLength}} maxlength={{maxLength}}></validation-error></div></div>");$templateCache.put("app/templates/Sri-ui-grid.html","<div><div id=grid ui-grid=vm.gridValues ui-grid-resize-columns ui-grid-selection ui-grid-move-columns ui-grid-save-state ui-grid-auto-resize class=grid-height></div><div class=text-center ng-if=\"vm.disablePagination === undefined\"><uib-pagination direction-links=true boundary-links=true total-items=vm.paginationInfo.totalResults items-per-page=vm.paginationInfo.pageSize max-size=vm.paginationInfo.maxSize rotate=false num-pages=numPages ng-model=vm.paginationInfo.currentPage ng-change=vm.getData()></uib-pagination></div></div>");$templateCache.put("app/templates/Sri-ui-multiSelect-grid.html","<div><div id=grid ui-grid=vm.gridValues ui-grid-resize-columns ui-grid-selection ui-grid-move-columns ui-grid-cellnav ui-grid-save-state ui-grid-auto-resize class=grid-height></div><div class=text-center ng-if=\"vm.disablePagination === undefined\"><uib-pagination direction-links=true boundary-links=true total-items=vm.paginationInfo.totalResults items-per-page=vm.paginationInfo.pageSize max-size=vm.paginationInfo.maxSize rotate=false num-pages=numPages ng-model=vm.paginationInfo.currentPage ng-change=vm.getData()></uib-pagination></div></div>");$templateCache.put("app/templates/reviewModalView.html","<div class=reviewPanel><Sri-spinner></Sri-spinner><div class=modal-header><h3 class=modal-title>Changes Submitted</h3></div><div class=modal-body><Sri-fieldset label-name=Changes scroll-bar=true><Sri-history-details class=col-md-11 data=SriReviewCtrl.changeData></Sri-history-details></Sri-fieldset></div><div class=modal-footer><button class=\"btn btn-primary\" type=button ng-click=SriReviewCtrl.close()>Close</button></div></div>");}]);angular.module('Sri.customTag.module').directive('SriAlphaNumeric', SriAlphaNumeric);function SriAlphaNumeric() {    return {        restrict: 'A',        require: "?ngModel",        link: SriAlphaNumericLink,    };}function SriAlphaNumericLink(scope, element, attributes, ngModelCtrl) {    if(ngModelCtrl === undefined || ngModelCtrl === null) {        return;    }    var pattern=/^[A-Za-z0-9]+$/;    if(attributes.searchPattern ==="true"){        pattern=/^[A-Za-z0-9*]+$/;    }    ngModelCtrl.$validators.alphaNumeric = function(modelValue) {        if(modelValue === null){            ngModelCtrl.$setViewValue(undefined);        }        if(modelValue === undefined || modelValue ===''){            return true;        }        var valid = pattern.test(modelValue);        if(!valid){            ngModelCtrl.$setDirty();            return false;        }        return true;    };}angular.module('Sri.customTag.module').directive('SriBusinessValidationErrors', SriBusinessValidationErrors);function SriBusinessValidationErrors() {    return {        restrict: 'E',        replace: true,        scope: {            SriBusinessErrors: "=",        },        templateUrl: SriBusinessValidationTemplateUrl,        link: SriBusinessValidationLink,    };}function SriBusinessValidationTemplateUrl(elem, attrs) {    return 'app/templates/Sri-business-errors.html';}function SriBusinessValidationLink(scope, element, attributes) {    if(Array.isArray(scope.SriBusinessErrors) === false) {        throw "Business Validation Errors not an Array";    }}/** * */angular.module('Sri.customTag.module').directive('SriCustomAsyncValidation', SriCustomAsyncValidation);function SriCustomAsyncValidation() {    return {        restrict: 'A',        require: "ngModel",        link: SriCustomAsyncValidationLink,    };}function SriCustomAsyncValidationLink(scope, element, attributes, ngModelCtrl) {    if(scope.customValidation === undefined) {        return;    }    ngModel.$asyncValidators.asyncValidation = function(modelValue) {        var defer = $q.defer();        if(scope.customValidation({value: modelValue})) {                defer.resolve();        } else {                defer.reject();        }        return defer.promise;    };}angular.module('Sri.customTag.module').directive('SriCustomErrorDisplay', SriCustomErrorDisplay);function SriCustomErrorDisplay() {    return {        restrict: 'A',        require: "?ngModel",        link: SriCustomErrorDisplayLink,    };}function SriCustomErrorDisplayLink(scope, element, attributes, ngModelCtrl) {    if(ngModelCtrl === undefined){        return;    }    ngModelCtrl.$validators.customErrorDisplay = function(modelValue) {        if(scope.customErrors === undefined) {            return true;        }        return scope.customErrors !== undefined && scope.customErrors.length === 0;    };}/** * */angular.module('Sri.customTag.module').directive('SriCustomValidation', SriCustomValidation);function SriCustomValidation() {    return {        restrict: 'A',        require: "ngModel",        link: SriCustomValidationLink,    };}function SriCustomValidationLink(scope, element, attributes, ngModelCtrl) {   if(scope.customValidation === undefined) {        return;    }    ngModelCtrl.$validators.customValidation = function(modelValue) {        if(scope.customValidation !== undefined) {            return scope.customValidation({value: modelValue});        }   };}/** * */angular.module('Sri.customTag.module').directive('SriDateTimePicker', SriDateTimePicker);function SriDateTimePicker() {    return {        restrict: 'E',        replace: true,        scope: {            SriDateModel: "=",            name: '@',            required: "@",            minDate: "=",        },        templateUrl: SriDateTimeTemplateUrl,        link: SriDateTimeLink,    };}function SriDateTimeTemplateUrl(elem, attrs) {    return 'app/templates/Sri-datetimepicker.html';}function SriDateTimeLink(scope, element, attributes) {    scope.openDatePicker = false;}/** * */    SriFieldset.$inject = ["$compile"];angular.module('Sri.customTag.module').directive('SriFieldset', SriFieldset);    function SriFieldset($compile) {        return {            restrict: 'E',            replace: true,            scope: {                labelName: '@',               // disableFields: '=',//try to Stop two way databinding on model.                labelStyle: "@",                noBorder:"@",                scrollBar:"@",            },            transclude: true,            link: SriFieldsetLink,            templateUrl: 'app/templates/Sri-fieldset.html',        };    }    function SriFieldsetLink(scope, element, attributes) {        if(scope.labelStyle=== undefined) {            scope.labelStyle = "legendStyle";        }        if(scope.noBorder=== undefined){            scope.fieldsetBorder="scheduler-border";        } else{            scope.fieldsetBorder="";        }        if(scope.scrollBar !== undefined){            scope.scrollBarEnable=true;            scope.scrollBarStyleClass="fieldset-scroll";        }     /*   if(scope.disableFields===true){            element.attr('disabled', ' ');        }*/    }angular.module('Sri.customTag.module').directive('SriFilter', SriFilter);function SriFilter() {        return {            require: 'ngModel',            restrict: 'A',            link: SriFilterLink,        };}function SriFilterLink(scope, element, attrs, modelCtrl) {        modelCtrl.$parsers.push(function(inputValue) {            if (inputValue === undefined)                return '';            var cleanInputValue = inputValue.replace(/[%<>+;]/g,'');            var uppcaseCleanInputValue='';            if(scope.allowLowerCase === undefined) {                uppcaseCleanInputValue = cleanInputValue.toUpperCase();            }else{                uppcaseCleanInputValue=cleanInputValue;            }            if (cleanInputValue != inputValue) {                modelCtrl.$setViewValue(uppcaseCleanInputValue);                modelCtrl.$render();            }            return uppcaseCleanInputValue;        });    if(scope.allowLowerCase === undefined) {        element.css("text-transform", "uppercase");    }}/** * */angular.module('Sri.customTag.module').directive('SriHistoryDetails', SriHistoryDetails);    function SriHistoryDetails() {        return {            restrict: 'E',            replace: true,            scope: {                data: '=',            },            templateUrl: 'app/templates/Sri-history-details.html',        };    }/** * */SriHistoryInfo.$inject = ["historyModalPanelService"];angular.module('Sri.customTag.module').directive('SriHistoryInfo', SriHistoryInfo);function SriHistoryInfo(historyModalPanelService) {    return {        restrict: 'E',        replace: true,        scope: {            id: '=',            profile: '@',            account: '=',            ledger: '=',        },        templateUrl: 'app/templates/Sri-history-info.html',        link: function (scope, element, attributes) {            scope.onHistorySelect = function() {                historyModalPanelService.modalOpen('tr-lg',scope.id, scope.profile, scope.account, scope.ledger);            };        }    };}/** * */    SriInput.$inject = ["$compile"];angular.module('Sri.customTag.module').directive('SriInput', SriInput);    function SriInput($compile) {        return {            restrict: 'E',            replace: true,            require: ['?^form'],            scope: {                type: "@",                SriModel: "=",                label: '@',                name: "@",                minLength: "@",                maxLength: "@",                pattern: "@",                SriDisabled: "=",                required: "@",                trim: "@",                labelClass: "@",                inputClass: "@",                allowLowerCase: "@",                externalSearch: "&",                customErrors: "="            },            templateUrl: SriInputTemplateUrl,            link: function(scope, element, attributes, controller) {                var formController = controller[0];                appendValidationDirectives(element, attributes);                $compile(element)(scope);                if (formController) {                    scope.errorhandler = formController[scope.name];                }                if(scope.inputClass=== undefined) {                    scope.inputClass = "col-md-2";                }                if(scope.labelClass=== undefined) {                    scope.labelClass = "col-md-1";                }                scope.regexPattern = new RegExp(scope.pattern);                var spanElem = element.find('span');                spanElem.bind("click", function(){                    scope.externalSearch();                });            },        };    }    function appendValidationDirectives(element, attributes) {        var inputElement = element.find('input');        if(attributes.SriAlphaNumeric !== undefined) {            inputElement.attr('Sri-alpha-numeric', '');        }        if(attributes.SriAlphaNumericSpace !== undefined){            inputElement.attr('Sri-alpha-numeric-space', '');        }        if(attributes.SriAlpha !== undefined){            inputElement.attr('Sri-alpha', '');        }        if(attributes.SriNumeric !== undefined){            inputElement.attr('Sri-numeric', '');        }        if(attributes.SriCodewordValidation !== undefined){            inputElement.attr('Sri-codeword-validation', attributes.SriCodewordValidation);        }        if(attributes.SriPatternValidation !== undefined){            inputElement.attr('Sri-pattern-validation', attributes.SriPatternValidation);        }        if(attributes.SriAccountLineValidation !== undefined){            inputElement.attr('Sri-account-line-validation', attributes.SriAccountLineValidation);        }        if(attributes.SriBicValidation !== undefined){            inputElement.attr('Sri-bic-validation', attributes.SriBicValidation);        }        if(attributes.SriAlphaNumericSpicalchar !== undefined){            inputElement.attr('Sri-alpha-numeric-spicalchar', attributes.SriAlphaNumericSpicalchar);        }        if(attributes.SriSynonymValidation !== undefined){            inputElement.attr('Sri-synonym-validation', attributes.SriSynonymValidation);        }    }    function SriInputTemplateUrl(elem, attrs) {        var defaultUrl = 'app/templates/Sri-input';        if (attrs.type === 'checkbox') {            return defaultUrl + '-checkbox.html';        }        if (attrs.type === 'search') {            return defaultUrl + '-search.html';        }        return defaultUrl + '.html';    }/** * */angular.module('Sri.customTag.module').directive('SriNoPercentileChar', SriNoPercentileChar);function SriNoPercentileChar() {    return {        restrict: 'A',        require: "?ngModel",        link: SriNoPercentileCharLink,    };}function SriNoPercentileCharLink(scope, element, attributes, ngModelCtrl) {    if(ngModelCtrl === undefined || ngModelCtrl === null) {        return;    }    var ngCtrl = ngModelCtrl;    ngModelCtrl.$formatters.push(function(inputValue) {       // console.log('********$formatters');        if(inputValue === null){            ngModelCtrl.$setViewValue(undefined);        }        if(inputValue === undefined || inputValue ===''){            return '';        }        var  cleanInputValue = inputValue.replace(/[%<>+;]/g,'');        return cleanInputValue;    });    ngModelCtrl.$parsers.push(function(inputValue) {       // console.log('********$parsers');        if(inputValue === null){            ngModelCtrl.$setViewValue(undefined);        }        if(inputValue === undefined || inputValue ===''){            return '';        }        var  cleanInputValue = inputValue.replace(/[%<>+;]/g,'');        return cleanInputValue;    });    element.on('blur keyup change', function() {        scope.$apply(function(){            ngModelCtrl.$setViewValue(ngModelCtrl.$modelValue);            ngModelCtrl.$render();           // console.log('********apply');        });    });}/** * */    SriNumberInput.$inject = ["$compile"];angular.module('Sri.customTag.module').directive('SriNumberInput', SriNumberInput);    function SriNumberInput($compile) {        return {            restrict: 'E',            replace: true,            require: ['?^form'],            scope: {                type: "@",                SriModel: "=",                label: '@',                name: "@",                minLength: "@",                maxLength: "@",                trim: "@",                labelClass: "@",                inputClass: "@",            },            templateUrl: 'app/templates/Sri-number-input.html',            link: function(scope, element, attributes, controller) {                var formController = controller[0];                $compile(element)(scope);                if (formController) {                    scope.errorhandler = formController[scope.name];                }                if(scope.inputClass=== undefined) {                    scope.inputClass = "col-md-2";                }                if(scope.labelClass=== undefined) {                    scope.labelClass = "col-md-1";                }                           },        };    }angular.module('Sri.customTag.module').directive('SriNumeric', SriNumeric);function SriNumeric() {    return {        restrict: 'A',        require: "?ngModel",        link: SriNumericLink,    };}function SriNumericLink(scope, element, attributes, ngModelCtrl) {    if(ngModelCtrl === undefined || ngModelCtrl === null) {        return;    }    var pattern=/^[0-9]+$/;    if(attributes.searchPattern ==="true"){        pattern=/^[0-9*]+$/;    }    ngModelCtrl.$validators.numeric = function(modelValue) {        if(modelValue === null){            ngModelCtrl.$setViewValue(undefined);        }        if(modelValue === undefined || modelValue ===''){            return true;        }        var valid = pattern.test(modelValue);        if(!valid){            ngModelCtrl.$setDirty();            return false;        }        return true;    };}/** * */    SriSearchInput.$inject = ["$compile"];angular.module('Sri.customTag.module').directive('SriSearchInput', SriSearchInput);    function SriSearchInput($compile) {        return {            restrict: 'E',            replace: true,            require: ['?^form'],            scope: {                type: "@",                SriModel: "=",                label: '@',                name: "@",                minLength: "@",                maxLength: "@",                searchPattern: "@",                trim: "@",                labelClass: "@",                inputClass: "@",                allowLowerCase: "@",                externalSearch: "&",            },            templateUrl: 'app/templates/Sri-search-input.html',            link: function(scope, element, attributes, controller) {                var formController = controller[0];               appendValidationDirectives(element, attributes);                $compile(element)(scope);                if (formController) {                    scope.errorhandler = formController[scope.name];                }                if(scope.inputClass=== undefined) {                    scope.inputClass = "col-md-2";                }                if(scope.labelClass=== undefined) {                    scope.labelClass = "col-md-1";                }                scope.regexPattern = new RegExp(scope.pattern);                var spanElem = element.find('span');                spanElem.bind("click", function(){                    scope.externalSearch();                });            },        };    }    function appendValidationDirectives(element, attributes) {        var inputElement = element.find('input');        if(attributes.SriAlphaNumeric !== undefined) {            inputElement.attr('Sri-alpha-numeric', '');        }        if(attributes.SriAlphaNumericSpace !== undefined){            inputElement.attr('Sri-alpha-numeric-space', '');        }        if(attributes.SriAlpha !== undefined){            inputElement.attr('Sri-alpha', '');        }        if(attributes.SriNumeric !== undefined){            inputElement.attr('Sri-numeric', '');        }        if(attributes.SriAlphaNumericSpicalchar !== undefined){            inputElement.attr('Sri-alpha-numeric-spicalchar', attributes.SriAlphaNumericSpicalchar);        }           }/** * */SriSelectCtrl.$inject = ["$scope"];angular.module('Sri.customTag.module').directive('SriSelect', SriSelect);function SriSelect () {    return {        restrict: 'E',        require: ['?^form'],        replace: true,        scope: {            SriModel: "=",            label: '@',            name: "@",            SriDisabled: "=",            required: "@",            labelClass: "@",            inputClass: "@",            options: '=',            selected: '=',            optionDisplay: '@',            onChangeValue: '&'        },        templateUrl: 'app/templates/Sri-select.html',        controller: SriSelectCtrl,        link: SriSelectlink,    };}function SriSelectCtrl($scope) {    if($scope.optionDisplay !== undefined) {        $scope.optionEval = "value as " + "value." + $scope.optionDisplay + " for value in options track by value.id";    } else {        $scope.optionEval = "value as value for value in options";    }}function SriSelectlink(scope, element, attributes, formController) {    if (formController) {        scope.errorhandler = formController[scope.name];    }    if(scope.inputClass === undefined) {        scope.inputClass = "col-md-2";    }    if(scope.labelClass === undefined) {        scope.labelClass = "col-md-1";    }    scope.updateValue = function() {        if(scope.onChangeValue) {            scope.onChangeValue();        }    };}/** * */angular.module('Sri.customTag.module').directive('SriTextArea', SriTextArea);function SriTextArea() {    return {        restrict: 'E',        replace: true,        require: ['?^form'],        scope: {            type: "@",            SriModel: "=",            label: '@',            name: "@",            minLength: "@",            maxLength: "@",            pattern: "@",            SriDisabled: "=",            required: "@",            trim: "@",            labelClass: "@",            inputClass: "@",            rows: "@"        },        templateUrl: SriTextAreaTemplateUrl,        link: SriTextAreaLink,    };}function SriTextAreaTemplateUrl(elem, attrs) {    return 'app/templates/Sri-textarea.html';}function SriTextAreaLink(scope, element, attributes, controller) {    var formController = controller[0];    if (formController) {        scope.errorhandler = formController[scope.name];    }    if(scope.inputClass=== undefined) {        scope.inputClass = "col-md-2";    }    if(scope.labelClass=== undefined) {        scope.labelClass = "col-md-1";    }    scope.regexPattern = new RegExp(scope.pattern);}angular.module('Sri.customTag.module').directive('SriUiGrid', SriUiGrid);function SriUiGrid() {    return {        restrict: 'E',        replace: true,        scope: {            paginationOptions: '=',            disablePagination: '@',            gridOptions: '=',            url: '@',            searchFilter: '=',            appId : '=',            multiSelect : '@',            enableCellSelection : '@'        },        templateUrl: SriUiGridUrl,        controller: SriUiGridController,        controllerAs: 'vm',        bindToController: true,    };}function SriUiGridUrl(elem, attrs) {    if(attrs.enableCellSelection === undefined) {        return 'app/templates/Sri-ui-grid.html';    }    return 'app/templates/Sri-ui-multiSelect-grid.html';}SriUiGridController.$inject = ['$scope', '$attrs', '$resource' ,'uiGridConstants', '$localStorage', 'SriApiService'];function SriUiGridController($scope, $attrs, $resource ,uiGridConstants, $localStorage, $SriApiService) {    var vm = this;    vm.resource = $resource;    //vm.localStorage = $localStorage;    vm.apiService = $SriApiService;    if(vm.paginationOptions === undefined) {        vm.paginationInfo = vm.defaultPaginationOptions();    } else {        vm.paginationInfo = vm.paginationOptions;    }    vm.original = angular.copy(vm.gridOptions);    for (var i=0, item; i <  vm.original.columnDefs.length; i++)  {        var temap =vm.gridOptions.columnDefs[i];        temap.sortDirectionCycle=["asc", "desc"];    }    vm.gridValues = vm.defaultGridValues(uiGridConstants);    if(vm.gridOptions.isRowSelectable !== undefined) {        vm.isRowSelectable();    }    vm.gridValues.onRegisterApi =  function(gridApi) {        vm.gridApi = gridApi;        //vm.gridApi.core.on.columnVisibilityChanged(null,  saveState.bind(vm));        vm.gridApi.selection.on.rowSelectionChangedBatch(null, selectAll.bind(vm));        vm.gridApi.selection.on.rowSelectionChanged(null, vm.onRowSelect.bind(vm));        if(vm.enableCellSelection !== undefined) {            vm.gridApi.cellNav.on.navigate(null, vm.onCellSelect.bind(vm));        }        if(vm.multiSelect === undefined || vm.multiSelect === 'false') {            vm.gridApi.core.on.sortChanged(null, vm.saveSortInfo.bind(vm));        }        vm.getData();    };    if(vm.gridOptions.columnDefs) {        vm.gridValues.columnDefs = vm.gridOptions.columnDefs;    }    vm.gridValues.appScopeProvider = vm;    vm.appendExternalFunctions();    vm.gridOptions.refreshGrid = function() {        vm.getData();    }.bind(vm);    vm.gridOptions.refresh = function() {        vm.refresh();    }.bind(vm);    vm.gridOptions.onBack = function() {        vm.onBack();    }.bind(vm);    vm.gridOptions.onNext = function() {        vm.onNext();    }.bind(vm);    //var saveState = function()  {    //    var state;    //    state =  vm.gridApi.saveState.save();    //    $localStorage[vm.appId + 'grid'] = state;    //};    var selectAll = function()  {        vm.gridOptions.selectedRows = vm.gridApi.selection.getSelectedRows();    };}SriUiGridController.prototype.refresh =function() {    this.gridApi.grid.refresh();};SriUiGridController.prototype.appendExternalFunctions = function() {    if(this.gridOptions.externalFunctions === undefined) {        return;    }    for (var key in this.gridOptions.externalFunctions) {        if (this.gridOptions.externalFunctions.hasOwnProperty(key)) {            this[key] = this.gridOptions.externalFunctions[key];        }    }};SriUiGridController.prototype.onCellSelect = function(newRowCol, oldRowCol) {    this.gridOptions.selectedRows = this.gridApi.selection.getSelectedRows();    if(newRowCol.col.colDef.name !== 'selectionRowHeaderCol' && this.multiSelect === 'true') {        this.gridOptions.onRowSelect(newRowCol.row);    }    if(newRowCol.col.colDef.onCellSelect !== undefined) {        newRowCol.col.colDef.onCellSelect(newRowCol.col, newRowCol.row);    }};SriUiGridController.prototype.saveSortInfo = function(grid, sortColumns) {    if(this.gridOptions.onSort !== undefined) {        this.gridOptions.onSort(grid, sortColumns);    } else if (sortColumns.length !== 0) {        //$localStorage[vm.appId + 'sortField'] = sortColumns;        this.gridOptions.sortFields = sortColumns[0].field;        this.gridOptions.sortDirections = sortColumns[0].sort.direction;    }    this.getData();};SriUiGridController.prototype.onRowSelect = function(row) {    if(this.multiSelect === undefined || this.multiSelect === 'false') {        this.gridOptions.onRowSelect(row);    }    this.gridOptions.selectedRows = this.gridApi.selection.getSelectedRows();};SriUiGridController.prototype.isRowSelectable = function() {    this.gridValues.isRowSelectable = this.gridOptions.isRowSelectable;};//SriUiGridController.prototype.restoreGrid = function() {//    var appGrid = this.appId + 'grid';//    if(this.localStorage[appGrid]) {//        this.gridApi.saveState.restore(null,  this.localStorage[appGrid]);//    }//};SriUiGridController.prototype.defaultGridValues = function(uiGridConstants) {    var singleRowSelect = this.multiSelect === undefined || this.multiSelect === 'false';    var scrollBars = singleRowSelect ? uiGridConstants.scrollbars.NEVER : uiGridConstants.scrollbars.ALWAYS;    return {        // flatEntityAccess: true,        enableHorizontalScrollbar : uiGridConstants.scrollbars.NEVER,        enableVerticalScrollbar: uiGridConstants.scrollbars.NEVER,        useExternalSorting: true,        enableGridMenu: true,        enableColumnResizing: true,        enableColumnReordering: true,        enableRowSelection: true,        enableRowHeaderSelection: singleRowSelect === false,        multiSelect: singleRowSelect === false,        selectedItems: [],    };};SriUiGridController.prototype.defaultPaginationOptions = function() {    return {        currentPage: 1,        pageSize: 20,        maxSize: 5,        totalResults: null    };};SriUiGridController.prototype.serviceArgs = function() {    return {        pageSize: this.paginationInfo.pageSize,        pageId: this.paginationInfo.currentPage,        sortBy: this.gridOptions.sortFields,        sortOrder: this.gridOptions.sortDirections,        filter: this.searchFilterFormat()    };};SriUiGridController.prototype.onBack =function() {    var indexOf = this.gridValues.data.indexOf(this.gridOptions.selectedRows[0]);    if(indexOf === 0 && this.paginationInfo.currentPage !== 1){        this.paginationInfo.currentPage = this.paginationInfo.currentPage - 1;        var args = this.serviceArgs();        var that = this;        this.getResource().then(function(data) {            that.updateGridData(data);            indexOf = that.paginationInfo.pageSize;            that.gridApi.grid.modifyRows(that.gridValues.data);            that.gridApi.selection.selectRow(that.gridValues.data[indexOf-1]);        });        return;    }    this.gridApi.selection.selectRow(this.gridValues.data[indexOf-1]);};SriUiGridController.prototype.onNext =function() {    var indexOf = this.gridValues.data.indexOf(this.gridOptions.selectedRows[0]);    if(indexOf >= (this.paginationInfo.pageSize-1)){        this.paginationInfo.currentPage = this.paginationInfo.currentPage + 1;        var args = this.serviceArgs();        var that = this;        this.getResource().then(function(data) {            that.updateGridData(data);            indexOf = -1;            that.gridApi.grid.modifyRows(that.gridValues.data);            that.gridApi.selection.selectRow(that.gridValues.data[indexOf+1]);        });        return;    }    this.gridApi.selection.selectRow(this.gridValues.data[indexOf+1]);};SriUiGridController.prototype.getData =function() {    var args = this.serviceArgs();    var that = this;    this.getResource().then(function (data) {        that.gridValues.data = data.entity ? data.entity : [];        that.gridOptions.data = data.entity ? data.entity : [];        that.paginationInfo.totalResults = data.count;        //that.restoreGrid();    });};SriUiGridController.prototype.updateGridData =function(list) {    this.gridValues.data = list.data.entity;    this.paginationInfo.totalResults = list.data.count;    //this.restoreGrid();};SriUiGridController.prototype.getResource =function() {    var args = this.serviceArgs();    return this.apiService.invoke({        url: this.url,        params: args    });};SriUiGridController.prototype.searchFilterFormat=function() {    this.createSearchString = function(filter, fieldName, fieldValue ) {        if(fieldValue !== "" && fieldValue !== undefined) {            filter = filter + fieldName + "::" + fieldValue;            filter = filter + "|";        }        return filter;    };    this.formattedSearchFilter = function() {        if(this.searchFilter === undefined) {            return;        }        var filter = "";        var that = this;        Object.keys(this.searchFilter).forEach(function(key) {            filter = that.createSearchString(filter, key, that.searchFilter[key]);        });        return  filter;    };    return this.formattedSearchFilter();};angular.module('Sri.customTag.module').directive('SriUpperCase', SriUpperCase);function SriUpperCase() {        return {            require: 'ngModel',            restrict: 'A',            link: uppercased,        };}function uppercased(scope, element, attrs, modelCtrl) {    if(scope.allowLowerCase === undefined) {        modelCtrl.$parsers.push(function(input) {            return input ? input.toUpperCase() : "";        });        element.css("text-transform","uppercase");    }}angular.module('Sri.customTag.module').directive('validationError', validationError);    function validationError () {      return {        restrict: 'E',        replace: 'true',        require: '^?form',        scope:{            customErrors: "="        },        templateUrl: 'app/templates/Sri-errorMessage.html',        link: validationErrorLink,      };    }    function validationErrorLink(scope, element, attributes, formController) {        if(formController) {            scope.errorhandler = formController[attributes.forname];        }        scope.minlength = attributes.minlength;        scope.maxlength = attributes.maxlength;    }/** * */SriAlertService.$inject = ["$q", "$uibModal"];angular.module('Sri.customTag.module').service('SriAlertService', SriAlertService);function SriAlertService($q, $uibModal) {    this.getAlert = function(alertParams) {        this.deferred = $q.defer();        this.modalOpen('sm', alertParams);        return this.deferred.promise;    };    this.modalOpen = function (size, alertParams) {        var that = this;        var modalInstance = $uibModal.open({            animation: true,            backdrop: false,            keyboard: false,            templateUrl: 'app/templates/Sri-alert.html',            controller: 'SriAlertCtrl as SriAlertCtrl',            size: size,            resolve: {                alertParams: function() {                    if(alertParams === undefined) {                        return {};                    }                    return alertParams;                }            }        }).result.then(function (status) {                if (status === 'SUCCESS') {                    that.deferred.resolve();                } else {                    that.deferred.reject();                }            });    };}/** * */SriCommentService.$inject = ["$q", "$uibModal"];angular.module('Sri.customTag.module').service('SriCommentService', SriCommentService);function SriCommentService($q, $uibModal) {    this.getComments = function(exclude) {        this.deferred = $q.defer();        this.modalOpen('sm', exclude);        return this.deferred.promise;    };    this.modalOpen = function (size, exclude) {        var that = this;        var modalInstance = $uibModal.open({            animation: true,            backdrop: false,            keyboard: false,            templateUrl: 'app/templates/Sri-comment-date.html',            controller: 'SriCommentCtrl as SriCommentCtrl',            size: size,            resolve: {                exclude: function() {                    if(exclude === undefined) {                        return {};                    }                    return exclude;                }            }        }).result.then(function (comments) {                if (comments !== undefined) {                    that.deferred.resolve(comments);                } else {                    that.deferred.reject('No Comments');                }            });    };}HistoryModalPanelService.$inject = ["$uibModal"];angular.module('Sri.customTag.module').service('historyModalPanelService', HistoryModalPanelService);function HistoryModalPanelService($uibModal) {    this.openHistoryModal = function (id) {        this.modalOpen('tr-lg', id);    };    this.modalOpen = function (size, id,profile, account,ledger) {        var modalParams = {            size:size,            id: id,            account:account,            ledger:ledger,            profile:profile        };        var modalInstance = $uibModal.open({            animation: true,            backdrop: false,            templateUrl: 'app/templates/history-panel.html',            controller: 'histPanelCtrl as histPanelCtrl',            size: size,            resolve: {                modalParams: function() {                    return modalParams;                },            }        });    };}/** * */SriLoadModules.$inject = ["CONFIG_PARAMS", "$injector"];angular.module('Sri.customTag.module').service('SriLoadModules', SriLoadModules);function SriLoadModules(CONFIG_PARAMS, $injector) {    this.loadModule = function(moduleName) {        var module  = angular.module(moduleName);        var queue = angular.module(moduleName)._invokeQueue;        var runBlocks = angular.module(moduleName)._runBlocks;        for(var i=0;i<queue.length;i++) {            var call = queue[i];            var provider = CONFIG_PARAMS.CONTROLLER_PROVIDER[call[0]];            if(provider) {                provider[call[1]].apply(provider, call[2]);            }        }        angular.forEach(runBlocks, function(fn) {            $injector.invoke(fn);        });    };}SriReviewPanelService.$inject = ["$uibModal"];angular.module('Sri.customTag.module').service('SriReviewPanelService', SriReviewPanelService);function SriReviewPanelService($uibModal) {    this.getReviewChanges=function(changeData,gridService,alertFactory) {      //  this.deferred = $q.defer();        this.modalOpen('lg', changeData,gridService,alertFactory);        //return this.deferred.promise;    };      this.modalOpen = function (size, changeData,gridService,alertFactory) {        var modalParams = {            size: size,            changeData:  changeData,            gridService: gridService,            alertFactory:alertFactory        };        var modalInstance = $uibModal.open({            animation: true,            backdrop: false,            templateUrl: 'app/templates/reviewModalView.html',            controller: 'SriReviewCtrl as SriReviewCtrl',            size: size,            resolve: {                modalParams: function() {                    return modalParams;                },            }        });    };}/** * */SriSearchService.$inject = ["$q", "$uibModal", "$injector", "SriLoadModules"];angular.module('Sri.customTag.module').service('SriSearchService', SriSearchService);function SriSearchService($q, $uibModal, $injector, SriLoadModules) {    this.callBackOnSelect = {};    this.searchParamService = undefined;    this.search = function(moduleName, includeUrl, searchFilter) {        this.deferred = $q.defer();        SriLoadModules.loadModule(moduleName);        this.modalOpen('lg', includeUrl, moduleName, searchFilter);        return this.deferred.promise;    };    this.modalOpen = function (size, includeUrl, moduleName, searchFilter) {        var that = this;        var searchParamService = this.populateSearchParamService(moduleName, searchFilter);        this.modalInstance = $uibModal.open({            animation: true,            backdrop: false,            keyboard: false,            templateUrl: "app/templates/Sri-search-panel.html",            controller: "SriSearchPanelCtrl",            controllerAs: "SriSearchPanelCtrl",            size: size,            resolve: {                url: function() {                    return includeUrl;                },                callBackOnSelect: function() {                    return that.callBackOnSelect;                }            }        }).result.then(function (selectedRow) {            if (selectedRow !== undefined) {                that.deferred.resolve(selectedRow);            } else {                that.deferred.reject('No Comments');            }        });    };    this.populateSearchParamService = function(moduleName, searchFilter) {        this.searchParamService = $injector.get(searchFilter.name);        var searchVal = searchFilter.searchFilter;        for(var property in searchVal){           this.searchParamService.internalSearchParams[property] = searchVal[property];        }        this.searchParamService.externalSearch = true;    };    this.onRowSelect = function(selectRow) {        this.callBackOnSelect.onRowSelect(selectRow, this.searchParamService);    }.bind(this);}
