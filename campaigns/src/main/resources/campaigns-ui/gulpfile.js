/* Gulpfile */ var gulp = require('gulp'),  path = require('path'),  folders = require('gulp-folders'),  minifyHTML = require('gulp-minify-html'),  templateCache = require('gulp-angular-templatecache'),  concat = require('gulp-concat'),  uglify = require('gulp-uglify'),  ngAnnotate = require('gulp-ng-annotate'),  rename = require('gulp-rename'),  gulpif = require('gulp-if'); fs = require('fs'),  header = require('gulp-header'),  footer = require('gulp-footer'),  es = require('event-stream'); minifyCSS = require('gulp-minify-css'),  sourcemaps = require('gulp-sourcemaps'),  plumber = require('gulp-plumber'),  runSequence = require('run-sequence'),  jshint=require('gulp-jshint'),  rimraf = require('rimraf'),  Server = require('karma').Server; gulp.task('default', function(callback) { runSequence('build', callback); }); gulp.task('ci-build', function(callback) {  runSequence('build',  'test','e2etest',  callback);    }); gulp.task('dev', function(callback) {  runSequence('build', 'test', 'e2etest-dev', callback); }); gulp.task('build', function(callback) {  runSequence('clean', 'lint',  'scripts', ['styles'], callback); }); gulp.task('test', function(callback) {  runSequence('templates', 'karma',callback); }); gulp.task('e2etest', function(callback) {  runSequence('webserver','protractor',callback); }); gulp.task('e2etest-dev', function(callback) {  runSequence('webserver-dev','protractor-dev',callback); }); gulp.task('styles', ['minifyCSS', 'copyfiles']); gulp.task('watch', function () {  gulp.watch('app/**/*.js', ['scripts']);  gulp.watch(files.styles,{cwd: paths.app}, ['minifyCSS']); }); var config = {  pkg : JSON.parse(fs.readFileSync('./package.json')),  banner:  '/*!\n' +  ' * <%= pkg.name %>\n' +  ' * <%= pkg.homepage %>\n' +  ' * Version: <%= pkg.version %> - <%= timestamp %>\n' +  ' * License: <%= pkg.license %>\n' +  ' */\n\n\n',  templateCache: {   file: 'templateCache.js',   options: {    module: 'sri',    root: 'app/',    standAlone: false   },  },  temp: './.tmp/' }; var files = {  html: ['**/*.html'],  templates: ['**/templates/*.html'],  feature: [   '/js/*-app.js',   '/js/templateCache.js',   'services/*.js',   'directives/*.js',   'filters/*.js',   'controller/*.js',   // Unit tests files are excluded   '!**/{test,tests}/*.js'  ],  scripts: ['**/*.js'],  css: 'css/**/*.css',  images: 'images/*.*',  copyinfo:  ['package.json','README.md'] }; // Paths that are used in all tasks var paths = {  app: 'app/',  dist: 'dist/'+config.pkg.name+'/',  libs: 'libs/',  css: 'css/',  images: 'images/',  js: 'js/',  templates: 'templates/' }; gulp.task('clean', function(cb) {  rimraf(paths.dist, cb); }); gulp.task('scripts', ['templates'], function() {  //ulp.task('scripts',  function() {  var buildLib = function(){   return gulp.src(['app/js/*-app.js','app/**/*.js'])    .pipe(ngAnnotate())    .pipe(plumber({     errorHandler: handleError    }))    .pipe(header('(function () { \n\'use strict\';\n'))    .pipe(footer('\n}());'))    .pipe(jshint())    .pipe(jshint.reporter('jshint-stylish'))    .pipe(jshint.reporter('fail'));  };  return es.merge(buildLib())   .pipe(plumber({    errorHandler: handleError   }))   .pipe(concat(config.pkg.name+'.js'))   .pipe(header(config.banner, {    timestamp: (new Date()).toISOString(), pkg: config.pkg   }))   .pipe(gulp.dest(paths.dist))   .pipe(uglify({preserveComments: 'some'}))   .pipe(rename({extname: '.min.js'}))   .pipe(gulp.dest(paths.dist)); }); gulp.task('templates', function () {  return gulp.src(files.templates, {cwd: paths.app})   .pipe(minifyHTML())   .pipe(templateCache(config.templateCache.file,    config.templateCache.options))   .pipe(gulp.dest(paths.app +paths.js)); }); //http://jshint.com/docs/ gulp.task('lint', function () {  console.log('lint task');  // Load package.json  var packageJSON = require('./package');  var jshintConfig = packageJSON.jshintConfig;  // Avoid lookup overhead  //jshintConfig.lookup = false;  gulp.src(files.scripts, {cwd: paths.app})   .pipe(jshint(jshintConfig))   // Output result using 'jshint-stylish' reporter   .pipe(jshint.reporter('jshint-stylish'))   // Fail the task if any error is found   .pipe(jshint.reporter('fail')); }); // Task 'minifyCSS' gulp.task('minifyCSS', function () {  var opts = {advanced: false, compatibility: 'ie10'};  gulp.src(files.css, {cwd: paths.app})   .pipe(minifyCSS(opts))   .pipe(rename(config.pkg.name+'-min.style.css'))   //.pipe(sourcemaps.init({loadMaps: true}))   //.pipe(sourcemaps.write())   .pipe(gulp.dest(paths.dist )); }); gulp.task('copyfiles', function () {  gulp.src(files.copyinfo)   .pipe(gulp.dest(paths.dist ));  gulp.src(paths.app+files.images)   .pipe(gulp.dest(paths.dist+paths.images )); }); gulp.task('karma', function (done) {  var server =  new Server({   configFile: __dirname + '/karma.conf.js',   singleRun: true  });  server.on('browser_error', function (browser, err){   console.log('Karma Run Failed: ' + err.message);   throw err;   //process.exit(0);  });  server.on('run_complete', function (browsers, results){   if (results.failed) {    //process.exit(1);    throw new Error('Karma: Tests Failed');   }   console.log('Karma Run Complete: No Failures');   done();  });  server.start(); }); gulp.task('protractor', function () { }); gulp.task('protractor-dev', function () { }); gulp.task('webserver', function () { }); gulp.task('webserver-dev', function () { }) var handleError = function (err) {  console.log(err.toString());  this.emit('end'); };
